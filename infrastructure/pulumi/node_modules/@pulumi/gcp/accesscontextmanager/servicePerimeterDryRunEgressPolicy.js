"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicePerimeterDryRunEgressPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manage a single EgressPolicy in the spec (dry-run) configuration for a service perimeter.
 * EgressPolicies match requests based on egressFrom and egressTo stanzas.
 * For an EgressPolicy to match, both egressFrom and egressTo stanzas must be matched.
 * If an EgressPolicy matches a request, the request is allowed to span the ServicePerimeter
 * boundary. For example, an EgressPolicy can be used to allow VMs on networks
 * within the ServicePerimeter to access a defined set of projects outside the
 * perimeter in certain contexts (e.g. to read data from a Cloud Storage bucket
 * or query against a BigQuery dataset).
 *
 * > **Note:** By default, updates to this resource will remove the EgressPolicy from the
 * from the perimeter and add it back in a non-atomic manner. To ensure that the new EgressPolicy
 * is added before the old one is removed, add a `lifecycle` block with `createBeforeDestroy = true` to this resource.
 *
 * To get more information about ServicePerimeterDryRunEgressPolicy, see:
 *
 * * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#egresspolicy)
 *
 * ## Example Usage
 */
class ServicePerimeterDryRunEgressPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ServicePerimeterDryRunEgressPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServicePerimeterDryRunEgressPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServicePerimeterDryRunEgressPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePerimeterDryRunEgressPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["egressFrom"] = state ? state.egressFrom : undefined;
            resourceInputs["egressTo"] = state ? state.egressTo : undefined;
            resourceInputs["perimeter"] = state ? state.perimeter : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.perimeter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'perimeter'");
            }
            resourceInputs["egressFrom"] = args ? args.egressFrom : undefined;
            resourceInputs["egressTo"] = args ? args.egressTo : undefined;
            resourceInputs["perimeter"] = args ? args.perimeter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicePerimeterDryRunEgressPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ServicePerimeterDryRunEgressPolicy = ServicePerimeterDryRunEgressPolicy;
/** @internal */
ServicePerimeterDryRunEgressPolicy.__pulumiType = 'gcp:accesscontextmanager/servicePerimeterDryRunEgressPolicy:ServicePerimeterDryRunEgressPolicy';
//# sourceMappingURL=servicePerimeterDryRunEgressPolicy.js.map