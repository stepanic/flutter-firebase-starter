"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * TargetServer configuration. TargetServers are used to decouple a proxy TargetEndpoint HTTPTargetConnections from concrete URLs for backend services.
 *
 * To get more information about TargetServer, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.targetservers/create)
 * * How-to Guides
 *     * [Load balancing across backend servers](https://cloud.google.com/apigee/docs/api-platform/deploy/load-balancing-across-backend-servers)
 *
 * ## Example Usage
 *
 * ### Apigee Target Server Test Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = new gcp.organizations.Project("project", {
 *     projectId: "my-project",
 *     name: "my-project",
 *     orgId: "123456789",
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * const apigee = new gcp.projects.Service("apigee", {
 *     project: project.projectId,
 *     service: "apigee.googleapis.com",
 * });
 * const servicenetworking = new gcp.projects.Service("servicenetworking", {
 *     project: project.projectId,
 *     service: "servicenetworking.googleapis.com",
 * }, {
 *     dependsOn: [apigee],
 * });
 * const compute = new gcp.projects.Service("compute", {
 *     project: project.projectId,
 *     service: "compute.googleapis.com",
 * }, {
 *     dependsOn: [servicenetworking],
 * });
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {
 *     name: "apigee-network",
 *     project: project.projectId,
 * }, {
 *     dependsOn: [compute],
 * });
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 *     project: project.projectId,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * }, {
 *     dependsOn: [servicenetworking],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: project.projectId,
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [
 *         apigeeVpcConnection,
 *         apigee,
 *     ],
 * });
 * const apigeeEnvironment = new gcp.apigee.Environment("apigee_environment", {
 *     orgId: apigeeOrg.id,
 *     name: "my-environment-name",
 *     description: "Apigee Environment",
 *     displayName: "environment-1",
 * });
 * const apigeeTargetServer = new gcp.apigee.TargetServer("apigee_target_server", {
 *     name: "my-target-server",
 *     description: "Apigee Target Server",
 *     protocol: "HTTP",
 *     host: "abc.foo.com",
 *     port: 8080,
 *     envId: apigeeEnvironment.id,
 * });
 * ```
 *
 * ## Import
 *
 * TargetServer can be imported using any of these accepted formats:
 *
 * * `{{env_id}}/targetservers/{{name}}`
 *
 * * `{{env_id}}/{{name}}`
 *
 * When using the `pulumi import` command, TargetServer can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/targetServer:TargetServer default {{env_id}}/targetservers/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apigee/targetServer:TargetServer default {{env_id}}/{{name}}
 * ```
 */
class TargetServer extends pulumi.CustomResource {
    /**
     * Get an existing TargetServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TargetServer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TargetServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TargetServer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["envId"] = state ? state.envId : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["sSlInfo"] = state ? state.sSlInfo : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.envId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envId'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["envId"] = args ? args.envId : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["sSlInfo"] = args ? args.sSlInfo : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TargetServer.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TargetServer = TargetServer;
/** @internal */
TargetServer.__pulumiType = 'gcp:apigee/targetServer:TargetServer';
//# sourceMappingURL=targetServer.js.map