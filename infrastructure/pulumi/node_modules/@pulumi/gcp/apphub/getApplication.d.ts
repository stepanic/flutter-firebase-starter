import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Application is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const application = gcp.apphub.getApplication({
 *     project: "project-id",
 *     applicationId: "application",
 *     location: "location",
 * });
 * ```
 */
export declare function getApplication(args: GetApplicationArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationResult>;
/**
 * A collection of arguments for invoking getApplication.
 */
export interface GetApplicationArgs {
    applicationId: string;
    location: string;
    project: string;
}
/**
 * A collection of values returned by getApplication.
 */
export interface GetApplicationResult {
    readonly applicationId: string;
    readonly attributes: outputs.apphub.GetApplicationAttribute[];
    readonly createTime: string;
    readonly description: string;
    readonly displayName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly location: string;
    readonly name: string;
    readonly project: string;
    readonly scopes: outputs.apphub.GetApplicationScope[];
    readonly state: string;
    readonly uid: string;
    readonly updateTime: string;
}
/**
 * Application is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const application = gcp.apphub.getApplication({
 *     project: "project-id",
 *     applicationId: "application",
 *     location: "location",
 * });
 * ```
 */
export declare function getApplicationOutput(args: GetApplicationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationResult>;
/**
 * A collection of arguments for invoking getApplication.
 */
export interface GetApplicationOutputArgs {
    applicationId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project: pulumi.Input<string>;
}
