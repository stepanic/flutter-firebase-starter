"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Application Integration Client.
 *
 * To get more information about Client, see:
 *
 * * [API documentation](https://cloud.google.com/application-integration/docs/reference/rest/v1/projects.locations.clients)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/application-integration/docs/overview)
 *     * [Set up Application Integration](https://cloud.google.com/application-integration/docs/setup-application-integration)
 *
 * ## Example Usage
 *
 * ### Integrations Client Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example = new gcp.applicationintegration.Client("example", {location: "us-central1"});
 * ```
 * ### Integrations Client Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testProject = gcp.organizations.getProject({});
 * const keyring = new gcp.kms.KeyRing("keyring", {
 *     name: "my-keyring",
 *     location: "us-east1",
 * });
 * const cryptokey = new gcp.kms.CryptoKey("cryptokey", {
 *     name: "crypto-key-example",
 *     keyRing: keyring.id,
 *     rotationPeriod: "7776000s",
 * });
 * const testKey = new gcp.kms.CryptoKeyVersion("test_key", {cryptoKey: cryptokey.id});
 * const serviceAccount = new gcp.serviceaccount.Account("service_account", {
 *     accountId: "service-acc",
 *     displayName: "Service Account",
 * });
 * const example = new gcp.applicationintegration.Client("example", {
 *     location: "us-east1",
 *     createSampleIntegrations: true,
 *     runAsServiceAccount: serviceAccount.email,
 *     cloudKmsConfig: {
 *         kmsLocation: "us-east1",
 *         kmsRing: keyring.id,
 *         key: cryptokey.id,
 *         keyVersion: testKey.id,
 *         kmsProjectId: testProject.then(testProject => testProject.projectId),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Client can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/clients`
 *
 * * `{{project}}/{{location}}`
 *
 * * `{{location}}`
 *
 * When using the `pulumi import` command, Client can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:applicationintegration/client:Client default projects/{{project}}/locations/{{location}}/clients
 * ```
 *
 * ```sh
 * $ pulumi import gcp:applicationintegration/client:Client default {{project}}/{{location}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:applicationintegration/client:Client default {{location}}
 * ```
 */
class Client extends pulumi.CustomResource {
    /**
     * Get an existing Client resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Client(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Client.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Client.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cloudKmsConfig"] = state ? state.cloudKmsConfig : undefined;
            resourceInputs["createSampleIntegrations"] = state ? state.createSampleIntegrations : undefined;
            resourceInputs["createSampleWorkflows"] = state ? state.createSampleWorkflows : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["provisionGmek"] = state ? state.provisionGmek : undefined;
            resourceInputs["runAsServiceAccount"] = state ? state.runAsServiceAccount : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["cloudKmsConfig"] = args ? args.cloudKmsConfig : undefined;
            resourceInputs["createSampleIntegrations"] = args ? args.createSampleIntegrations : undefined;
            resourceInputs["createSampleWorkflows"] = args ? args.createSampleWorkflows : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["provisionGmek"] = args ? args.provisionGmek : undefined;
            resourceInputs["runAsServiceAccount"] = args ? args.runAsServiceAccount : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Client.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Client = Client;
/** @internal */
Client.__pulumiType = 'gcp:applicationintegration/client:Client';
//# sourceMappingURL=client.js.map