"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectInfo = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Billing information for a project.
 *
 * To get more information about ProjectInfo, see:
 *
 * * [API documentation](https://cloud.google.com/billing/docs/reference/rest/v1/projects)
 * * How-to Guides
 *     * [Enable, disable, or change billing for a project](https://cloud.google.com/billing/docs/how-to/modify-project)
 *
 * ## Example Usage
 *
 * ### Billing Project Info Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = new gcp.organizations.Project("project", {
 *     projectId: "tf-test_81126",
 *     name: "tf-test_88717",
 *     orgId: "123456789",
 * });
 * const _default = new gcp.billing.ProjectInfo("default", {
 *     project: project.projectId,
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * ```
 *
 * ## Import
 *
 * ProjectInfo can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}`
 *
 * * `{{project}}`
 *
 * When using the `pulumi import` command, ProjectInfo can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:billing/projectInfo:ProjectInfo default projects/{{project}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:billing/projectInfo:ProjectInfo default {{project}}
 * ```
 */
class ProjectInfo extends pulumi.CustomResource {
    /**
     * Get an existing ProjectInfo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectInfo(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectInfo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectInfo.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["billingAccount"] = state ? state.billingAccount : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.billingAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'billingAccount'");
            }
            resourceInputs["billingAccount"] = args ? args.billingAccount : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectInfo.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProjectInfo = ProjectInfo;
/** @internal */
ProjectInfo.__pulumiType = 'gcp:billing/projectInfo:ProjectInfo';
//# sourceMappingURL=projectInfo.js.map