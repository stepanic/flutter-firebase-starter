import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A representation of a blockchain node.
 *
 * To get more information about BlockchainNodes, see:
 *
 * * [API documentation](https://cloud.google.com/blockchain-node-engine/docs/reference/rest/v1/projects.locations.blockchainNodes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/blockchain-node-engine)
 *
 * ## Example Usage
 *
 * ### Blockchain Nodes Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNode = new gcp.blockchainnodeengine.BlockchainNodes("default_node", {
 *     location: "us-central1",
 *     blockchainType: "ETHEREUM",
 *     blockchainNodeId: "blockchain_basic_node",
 *     ethereumDetails: {
 *         apiEnableAdmin: true,
 *         apiEnableDebug: true,
 *         validatorConfig: {
 *             mevRelayUrls: [
 *                 "https://mev1.example.org/",
 *                 "https://mev2.example.org/",
 *             ],
 *         },
 *         nodeType: "ARCHIVE",
 *         consensusClient: "LIGHTHOUSE",
 *         executionClient: "ERIGON",
 *         network: "MAINNET",
 *     },
 *     labels: {
 *         environment: "dev",
 *     },
 * });
 * ```
 * ### Blockchain Nodes Geth Details
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNodeGeth = new gcp.blockchainnodeengine.BlockchainNodes("default_node_geth", {
 *     location: "us-central1",
 *     blockchainType: "ETHEREUM",
 *     blockchainNodeId: "blockchain_geth_node",
 *     ethereumDetails: {
 *         apiEnableAdmin: true,
 *         apiEnableDebug: true,
 *         validatorConfig: {
 *             mevRelayUrls: [
 *                 "https://mev1.example.org/",
 *                 "https://mev2.example.org/",
 *             ],
 *         },
 *         nodeType: "FULL",
 *         consensusClient: "LIGHTHOUSE",
 *         executionClient: "GETH",
 *         network: "MAINNET",
 *         gethDetails: {
 *             garbageCollectionMode: "FULL",
 *         },
 *     },
 *     labels: {
 *         environment: "dev",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * BlockchainNodes can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}`
 *
 * * `{{project}}/{{location}}/{{blockchain_node_id}}`
 *
 * * `{{location}}/{{blockchain_node_id}}`
 *
 * When using the `pulumi import` command, BlockchainNodes can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{project}}/{{location}}/{{blockchain_node_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{location}}/{{blockchain_node_id}}
 * ```
 */
export declare class BlockchainNodes extends pulumi.CustomResource {
    /**
     * Get an existing BlockchainNodes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockchainNodesState, opts?: pulumi.CustomResourceOptions): BlockchainNodes;
    /**
     * Returns true if the given object is an instance of BlockchainNodes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is BlockchainNodes;
    /**
     * ID of the requesting object.
     *
     *
     * - - -
     */
    readonly blockchainNodeId: pulumi.Output<string>;
    /**
     * User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     */
    readonly blockchainType: pulumi.Output<string | undefined>;
    /**
     * The connection information through which to interact with a blockchain node.
     * Structure is documented below.
     */
    readonly connectionInfos: pulumi.Output<outputs.blockchainnodeengine.BlockchainNodesConnectionInfo[]>;
    /**
     * The timestamp at which the blockchain node was first created.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    readonly effectiveLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * User-provided key-value pairs
     * Structure is documented below.
     */
    readonly ethereumDetails: pulumi.Output<outputs.blockchainnodeengine.BlockchainNodesEthereumDetails | undefined>;
    /**
     * User-provided key-value pairs
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Location of Blockchain Node being created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    readonly pulumiLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The timestamp at which the blockchain node was last updated.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a BlockchainNodes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockchainNodesArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering BlockchainNodes resources.
 */
export interface BlockchainNodesState {
    /**
     * ID of the requesting object.
     *
     *
     * - - -
     */
    blockchainNodeId?: pulumi.Input<string>;
    /**
     * User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     */
    blockchainType?: pulumi.Input<string>;
    /**
     * The connection information through which to interact with a blockchain node.
     * Structure is documented below.
     */
    connectionInfos?: pulumi.Input<pulumi.Input<inputs.blockchainnodeengine.BlockchainNodesConnectionInfo>[]>;
    /**
     * The timestamp at which the blockchain node was first created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * User-provided key-value pairs
     * Structure is documented below.
     */
    ethereumDetails?: pulumi.Input<inputs.blockchainnodeengine.BlockchainNodesEthereumDetails>;
    /**
     * User-provided key-value pairs
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Location of Blockchain Node being created.
     */
    location?: pulumi.Input<string>;
    /**
     * The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The timestamp at which the blockchain node was last updated.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a BlockchainNodes resource.
 */
export interface BlockchainNodesArgs {
    /**
     * ID of the requesting object.
     *
     *
     * - - -
     */
    blockchainNodeId: pulumi.Input<string>;
    /**
     * User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     */
    blockchainType?: pulumi.Input<string>;
    /**
     * User-provided key-value pairs
     * Structure is documented below.
     */
    ethereumDetails?: pulumi.Input<inputs.blockchainnodeengine.BlockchainNodesEthereumDetails>;
    /**
     * User-provided key-value pairs
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Location of Blockchain Node being created.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
