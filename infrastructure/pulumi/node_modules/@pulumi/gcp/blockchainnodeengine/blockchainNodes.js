"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchainNodes = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A representation of a blockchain node.
 *
 * To get more information about BlockchainNodes, see:
 *
 * * [API documentation](https://cloud.google.com/blockchain-node-engine/docs/reference/rest/v1/projects.locations.blockchainNodes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/blockchain-node-engine)
 *
 * ## Example Usage
 *
 * ### Blockchain Nodes Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNode = new gcp.blockchainnodeengine.BlockchainNodes("default_node", {
 *     location: "us-central1",
 *     blockchainType: "ETHEREUM",
 *     blockchainNodeId: "blockchain_basic_node",
 *     ethereumDetails: {
 *         apiEnableAdmin: true,
 *         apiEnableDebug: true,
 *         validatorConfig: {
 *             mevRelayUrls: [
 *                 "https://mev1.example.org/",
 *                 "https://mev2.example.org/",
 *             ],
 *         },
 *         nodeType: "ARCHIVE",
 *         consensusClient: "LIGHTHOUSE",
 *         executionClient: "ERIGON",
 *         network: "MAINNET",
 *     },
 *     labels: {
 *         environment: "dev",
 *     },
 * });
 * ```
 * ### Blockchain Nodes Geth Details
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNodeGeth = new gcp.blockchainnodeengine.BlockchainNodes("default_node_geth", {
 *     location: "us-central1",
 *     blockchainType: "ETHEREUM",
 *     blockchainNodeId: "blockchain_geth_node",
 *     ethereumDetails: {
 *         apiEnableAdmin: true,
 *         apiEnableDebug: true,
 *         validatorConfig: {
 *             mevRelayUrls: [
 *                 "https://mev1.example.org/",
 *                 "https://mev2.example.org/",
 *             ],
 *         },
 *         nodeType: "FULL",
 *         consensusClient: "LIGHTHOUSE",
 *         executionClient: "GETH",
 *         network: "MAINNET",
 *         gethDetails: {
 *             garbageCollectionMode: "FULL",
 *         },
 *     },
 *     labels: {
 *         environment: "dev",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * BlockchainNodes can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}`
 *
 * * `{{project}}/{{location}}/{{blockchain_node_id}}`
 *
 * * `{{location}}/{{blockchain_node_id}}`
 *
 * When using the `pulumi import` command, BlockchainNodes can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{project}}/{{location}}/{{blockchain_node_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{location}}/{{blockchain_node_id}}
 * ```
 */
class BlockchainNodes extends pulumi.CustomResource {
    /**
     * Get an existing BlockchainNodes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BlockchainNodes(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BlockchainNodes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockchainNodes.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["blockchainNodeId"] = state ? state.blockchainNodeId : undefined;
            resourceInputs["blockchainType"] = state ? state.blockchainType : undefined;
            resourceInputs["connectionInfos"] = state ? state.connectionInfos : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["ethereumDetails"] = state ? state.ethereumDetails : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.blockchainNodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockchainNodeId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["blockchainNodeId"] = args ? args.blockchainNodeId : undefined;
            resourceInputs["blockchainType"] = args ? args.blockchainType : undefined;
            resourceInputs["ethereumDetails"] = args ? args.ethereumDetails : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["connectionInfos"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BlockchainNodes.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BlockchainNodes = BlockchainNodes;
/** @internal */
BlockchainNodes.__pulumiType = 'gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes';
//# sourceMappingURL=blockchainNodes.js.map