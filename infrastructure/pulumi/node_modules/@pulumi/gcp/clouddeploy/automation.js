"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Automation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * An `Automation` enables the automation of manually driven actions for a Delivery Pipeline, which includes Release promotion amongst Targets, Rollout repair and Rollout deployment strategy advancement.
 *
 * To get more information about Automation, see:
 *
 * * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.deliveryPipelines.automations)
 * * How-to Guides
 *     * [Automate your deployment](https://cloud.google.com/deploy/docs/automation)
 *
 * ## Example Usage
 *
 * ### Clouddeploy Automation Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const pipeline = new gcp.clouddeploy.DeliveryPipeline("pipeline", {
 *     name: "cd-pipeline",
 *     location: "us-central1",
 *     serialPipeline: {
 *         stages: [{
 *             targetId: "test",
 *             profiles: [],
 *         }],
 *     },
 * });
 * const b_automation = new gcp.clouddeploy.Automation("b-automation", {
 *     name: "cd-automation",
 *     project: pipeline.project,
 *     location: pipeline.location,
 *     deliveryPipeline: pipeline.name,
 *     serviceAccount: "my@service-account.com",
 *     selector: {
 *         targets: [{
 *             id: "*",
 *         }],
 *     },
 *     suspended: false,
 *     rules: [{
 *         promoteReleaseRule: {
 *             id: "promote-release",
 *         },
 *     }],
 * });
 * ```
 * ### Clouddeploy Automation Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const pipeline = new gcp.clouddeploy.DeliveryPipeline("pipeline", {
 *     name: "cd-pipeline",
 *     location: "us-central1",
 *     serialPipeline: {
 *         stages: [{
 *             targetId: "test",
 *             profiles: ["test-profile"],
 *         }],
 *     },
 * });
 * const f_automation = new gcp.clouddeploy.Automation("f-automation", {
 *     name: "cd-automation",
 *     location: "us-central1",
 *     deliveryPipeline: pipeline.name,
 *     serviceAccount: "my@service-account.com",
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 *     description: "automation resource",
 *     selector: {
 *         targets: [{
 *             id: "test",
 *             labels: {
 *                 foo: "bar",
 *             },
 *         }],
 *     },
 *     suspended: true,
 *     rules: [
 *         {
 *             promoteReleaseRule: {
 *                 id: "promote-release",
 *                 wait: "200s",
 *                 destinationTargetId: "@next",
 *                 destinationPhase: "stable",
 *             },
 *         },
 *         {
 *             advanceRolloutRule: {
 *                 id: "advance-rollout",
 *                 sourcePhases: ["deploy"],
 *                 wait: "200s",
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Automation can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/deliveryPipelines/{{delivery_pipeline}}/automations/{{name}}`
 *
 * * `{{project}}/{{location}}/{{delivery_pipeline}}/{{name}}`
 *
 * * `{{location}}/{{delivery_pipeline}}/{{name}}`
 *
 * When using the `pulumi import` command, Automation can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/automation:Automation default projects/{{project}}/locations/{{location}}/deliveryPipelines/{{delivery_pipeline}}/automations/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/automation:Automation default {{project}}/{{location}}/{{delivery_pipeline}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/automation:Automation default {{location}}/{{delivery_pipeline}}/{{name}}
 * ```
 */
class Automation extends pulumi.CustomResource {
    /**
     * Get an existing Automation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Automation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Automation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Automation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deliveryPipeline"] = state ? state.deliveryPipeline : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["selector"] = state ? state.selector : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.deliveryPipeline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliveryPipeline'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.selector === undefined) && !opts.urn) {
                throw new Error("Missing required property 'selector'");
            }
            if ((!args || args.serviceAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccount'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["deliveryPipeline"] = args ? args.deliveryPipeline : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["selector"] = args ? args.selector : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Automation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Automation = Automation;
/** @internal */
Automation.__pulumiType = 'gcp:clouddeploy/automation:Automation';
//# sourceMappingURL=automation.js.map