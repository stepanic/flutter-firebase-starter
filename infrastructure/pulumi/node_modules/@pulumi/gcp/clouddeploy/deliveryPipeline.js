"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryPipeline = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The Cloud Deploy `DeliveryPipeline` resource
 *
 * ## Example Usage
 *
 * ### Canary_delivery_pipeline
 * Creates a basic Cloud Deploy delivery pipeline
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.DeliveryPipeline("primary", {
 *     location: "us-west1",
 *     name: "pipeline",
 *     description: "basic description",
 *     project: "my-project-name",
 *     serialPipeline: {
 *         stages: [
 *             {
 *                 deployParameters: [{
 *                     values: {
 *                         deployParameterKey: "deployParameterValue",
 *                     },
 *                     matchTargetLabels: {},
 *                 }],
 *                 profiles: [
 *                     "example-profile-one",
 *                     "example-profile-two",
 *                 ],
 *                 targetId: "example-target-one",
 *             },
 *             {
 *                 profiles: [],
 *                 targetId: "example-target-two",
 *             },
 *         ],
 *     },
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 * });
 * ```
 * ### Canary_service_networking_delivery_pipeline
 * Creates a basic Cloud Deploy delivery pipeline
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.DeliveryPipeline("primary", {
 *     location: "us-west1",
 *     name: "pipeline",
 *     description: "basic description",
 *     project: "my-project-name",
 *     serialPipeline: {
 *         stages: [
 *             {
 *                 deployParameters: [{
 *                     values: {
 *                         deployParameterKey: "deployParameterValue",
 *                     },
 *                     matchTargetLabels: {},
 *                 }],
 *                 profiles: [
 *                     "example-profile-one",
 *                     "example-profile-two",
 *                 ],
 *                 targetId: "example-target-one",
 *             },
 *             {
 *                 profiles: [],
 *                 targetId: "example-target-two",
 *             },
 *         ],
 *     },
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 * });
 * ```
 * ### Canaryrun_delivery_pipeline
 * Creates a basic Cloud Deploy delivery pipeline
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.DeliveryPipeline("primary", {
 *     location: "us-west1",
 *     name: "pipeline",
 *     description: "basic description",
 *     project: "my-project-name",
 *     serialPipeline: {
 *         stages: [
 *             {
 *                 deployParameters: [{
 *                     values: {
 *                         deployParameterKey: "deployParameterValue",
 *                     },
 *                     matchTargetLabels: {},
 *                 }],
 *                 profiles: [
 *                     "example-profile-one",
 *                     "example-profile-two",
 *                 ],
 *                 targetId: "example-target-one",
 *             },
 *             {
 *                 profiles: [],
 *                 targetId: "example-target-two",
 *             },
 *         ],
 *     },
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 * });
 * ```
 * ### Delivery_pipeline
 * Creates a basic Cloud Deploy delivery pipeline
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.DeliveryPipeline("primary", {
 *     location: "us-west1",
 *     name: "pipeline",
 *     description: "basic description",
 *     project: "my-project-name",
 *     serialPipeline: {
 *         stages: [
 *             {
 *                 deployParameters: [{
 *                     values: {
 *                         deployParameterKey: "deployParameterValue",
 *                     },
 *                     matchTargetLabels: {},
 *                 }],
 *                 profiles: [
 *                     "example-profile-one",
 *                     "example-profile-two",
 *                 ],
 *                 targetId: "example-target-one",
 *             },
 *             {
 *                 profiles: [],
 *                 targetId: "example-target-two",
 *             },
 *         ],
 *     },
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 * });
 * ```
 * ### Verify_delivery_pipeline
 * tests creating and updating a delivery pipeline with deployment verification strategy
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.DeliveryPipeline("primary", {
 *     location: "us-west1",
 *     name: "pipeline",
 *     description: "basic description",
 *     project: "my-project-name",
 *     serialPipeline: {
 *         stages: [
 *             {
 *                 deployParameters: [{
 *                     values: {
 *                         deployParameterKey: "deployParameterValue",
 *                     },
 *                     matchTargetLabels: {},
 *                 }],
 *                 profiles: [
 *                     "example-profile-one",
 *                     "example-profile-two",
 *                 ],
 *                 targetId: "example-target-one",
 *             },
 *             {
 *                 profiles: [],
 *                 targetId: "example-target-two",
 *             },
 *         ],
 *     },
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * DeliveryPipeline can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/deliveryPipelines/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, DeliveryPipeline can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default projects/{{project}}/locations/{{location}}/deliveryPipelines/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default {{location}}/{{name}}
 * ```
 */
class DeliveryPipeline extends pulumi.CustomResource {
    /**
     * Get an existing DeliveryPipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DeliveryPipeline(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DeliveryPipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeliveryPipeline.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["serialPipeline"] = state ? state.serialPipeline : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serialPipeline"] = args ? args.serialPipeline : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DeliveryPipeline.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DeliveryPipeline = DeliveryPipeline;
/** @internal */
DeliveryPipeline.__pulumiType = 'gcp:clouddeploy/deliveryPipeline:DeliveryPipeline';
//# sourceMappingURL=deliveryPipeline.js.map