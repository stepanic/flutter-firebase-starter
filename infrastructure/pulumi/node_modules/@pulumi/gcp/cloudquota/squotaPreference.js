"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQuotaPreference = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * QuotaPreference represents the preferred quota configuration specified for a project, folder or organization. There is only one QuotaPreference resource for a quota value targeting a unique set of dimensions.
 *
 * To get more information about QuotaPreference, see:
 *
 * * [API documentation](https://cloud.google.com/docs/quotas/reference/rest/v1/projects.locations.quotaPreferences)
 * * How-to Guides
 *     * [Cloud Quotas Overview](https://cloud.google.com/docs/quotas/overview)
 *
 * ## Example Usage
 *
 * ### Cloudquotas Quota Preference Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const preference = new gcp.cloudquota.SQuotaPreference("preference", {
 *     parent: "projects/my-project-name",
 *     name: "compute_googleapis_com-CPUS-per-project_us-east1",
 *     dimensions: {
 *         region: "us-east1",
 *     },
 *     service: "compute.googleapis.com",
 *     quotaId: "CPUS-per-project-region",
 *     contactEmail: "testuser@gmail.com",
 *     quotaConfig: {
 *         preferredValue: "200",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * QuotaPreference can be imported using any of these accepted formats:
 *
 * * `{{parent}}/locations/global/quotaPreferences/{{name}}`
 *
 * When using the `pulumi import` command, QuotaPreference can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:cloudquota/sQuotaPreference:SQuotaPreference default {{parent}}/locations/global/quotaPreferences/{{name}}
 * ```
 */
class SQuotaPreference extends pulumi.CustomResource {
    /**
     * Get an existing SQuotaPreference resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SQuotaPreference(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SQuotaPreference.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SQuotaPreference.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["contactEmail"] = state ? state.contactEmail : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dimensions"] = state ? state.dimensions : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["ignoreSafetyChecks"] = state ? state.ignoreSafetyChecks : undefined;
            resourceInputs["justification"] = state ? state.justification : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["quotaConfig"] = state ? state.quotaConfig : undefined;
            resourceInputs["quotaId"] = state ? state.quotaId : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.quotaConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'quotaConfig'");
            }
            resourceInputs["contactEmail"] = args ? args.contactEmail : undefined;
            resourceInputs["dimensions"] = args ? args.dimensions : undefined;
            resourceInputs["ignoreSafetyChecks"] = args ? args.ignoreSafetyChecks : undefined;
            resourceInputs["justification"] = args ? args.justification : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["quotaConfig"] = args ? args.quotaConfig : undefined;
            resourceInputs["quotaId"] = args ? args.quotaId : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SQuotaPreference.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SQuotaPreference = SQuotaPreference;
/** @internal */
SQuotaPreference.__pulumiType = 'gcp:cloudquota/sQuotaPreference:SQuotaPreference';
//# sourceMappingURL=squotaPreference.js.map