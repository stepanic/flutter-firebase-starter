"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserWorkloadsSecretOutput = exports.getUserWorkloadsSecret = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 *
 * const exampleEnvironment = new gcp.composer.Environment("example", {
 *     name: "example-environment",
 *     config: {
 *         softwareConfig: {
 *             imageVersion: "composer-3-airflow-2",
 *         },
 *     },
 * });
 * const exampleUserWorkloadsSecret = new gcp.composer.UserWorkloadsSecret("example", {
 *     environment: exampleEnvironment.name,
 *     name: "example-secret",
 *     data: {
 *         username: std.base64encode({
 *             input: "username",
 *         }).then(invoke => invoke.result),
 *         password: std.base64encode({
 *             input: "password",
 *         }).then(invoke => invoke.result),
 *     },
 * });
 * const example = exampleEnvironment.name.apply(name => gcp.composer.getUserWorkloadsSecretOutput({
 *     environment: name,
 *     name: googleComposerUserWorkloadsSecret.example.name,
 * }));
 * export const debug = example;
 * ```
 */
function getUserWorkloadsSecret(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:composer/getUserWorkloadsSecret:getUserWorkloadsSecret", {
        "environment": args.environment,
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}
exports.getUserWorkloadsSecret = getUserWorkloadsSecret;
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 *
 * const exampleEnvironment = new gcp.composer.Environment("example", {
 *     name: "example-environment",
 *     config: {
 *         softwareConfig: {
 *             imageVersion: "composer-3-airflow-2",
 *         },
 *     },
 * });
 * const exampleUserWorkloadsSecret = new gcp.composer.UserWorkloadsSecret("example", {
 *     environment: exampleEnvironment.name,
 *     name: "example-secret",
 *     data: {
 *         username: std.base64encode({
 *             input: "username",
 *         }).then(invoke => invoke.result),
 *         password: std.base64encode({
 *             input: "password",
 *         }).then(invoke => invoke.result),
 *     },
 * });
 * const example = exampleEnvironment.name.apply(name => gcp.composer.getUserWorkloadsSecretOutput({
 *     environment: name,
 *     name: googleComposerUserWorkloadsSecret.example.name,
 * }));
 * export const debug = example;
 * ```
 */
function getUserWorkloadsSecretOutput(args, opts) {
    return pulumi.output(args).apply((a) => getUserWorkloadsSecret(a, opts));
}
exports.getUserWorkloadsSecretOutput = getUserWorkloadsSecretOutput;
//# sourceMappingURL=getUserWorkloadsSecret.js.map