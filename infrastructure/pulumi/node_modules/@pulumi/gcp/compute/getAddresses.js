"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddressesOutput = exports.getAddresses = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * List IP addresses in a project. For more information see
 * the official API [list](https://cloud.google.com/compute/docs/reference/latest/addresses/list) and
 * [aggregated list](https://cloud.google.com/compute/docs/reference/rest/v1/addresses/aggregatedList) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const test = gcp.compute.getAddresses({
 *     filter: "name:test-*",
 * });
 * const prod = new gcp.dns.ManagedZone("prod", {
 *     name: "prod-zone",
 *     dnsName: "prod.mydomain.com.",
 * });
 * const frontend = new gcp.dns.RecordSet("frontend", {
 *     name: pulumi.interpolate`frontend.${prod.dnsName}`,
 *     type: "A",
 *     ttl: 300,
 *     managedZone: prod.name,
 *     rrdatas: test.then(test => test.addresses.map(__item => __item.address)),
 * });
 * ```
 */
function getAddresses(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:compute/getAddresses:getAddresses", {
        "filter": args.filter,
        "project": args.project,
        "region": args.region,
    }, opts);
}
exports.getAddresses = getAddresses;
/**
 * List IP addresses in a project. For more information see
 * the official API [list](https://cloud.google.com/compute/docs/reference/latest/addresses/list) and
 * [aggregated list](https://cloud.google.com/compute/docs/reference/rest/v1/addresses/aggregatedList) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const test = gcp.compute.getAddresses({
 *     filter: "name:test-*",
 * });
 * const prod = new gcp.dns.ManagedZone("prod", {
 *     name: "prod-zone",
 *     dnsName: "prod.mydomain.com.",
 * });
 * const frontend = new gcp.dns.RecordSet("frontend", {
 *     name: pulumi.interpolate`frontend.${prod.dnsName}`,
 *     type: "A",
 *     ttl: 300,
 *     managedZone: prod.name,
 *     rrdatas: test.then(test => test.addresses.map(__item => __item.address)),
 * });
 * ```
 */
function getAddressesOutput(args, opts) {
    return pulumi.output(args).apply((a) => getAddresses(a, opts));
}
exports.getAddressesOutput = getAddressesOutput;
//# sourceMappingURL=getAddresses.js.map