import * as pulumi from "@pulumi/pulumi";
export declare function getBackendServiceIamPolicy(args: GetBackendServiceIamPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetBackendServiceIamPolicyResult>;
/**
 * A collection of arguments for invoking getBackendServiceIamPolicy.
 */
export interface GetBackendServiceIamPolicyArgs {
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    name: string;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     */
    project?: string;
}
/**
 * A collection of values returned by getBackendServiceIamPolicy.
 */
export interface GetBackendServiceIamPolicyResult {
    /**
     * (Computed) The etag of the IAM policy.
     */
    readonly etag: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    /**
     * (Required only by `gcp.compute.BackendServiceIamPolicy`) The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     */
    readonly policyData: string;
    readonly project: string;
}
export declare function getBackendServiceIamPolicyOutput(args: GetBackendServiceIamPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBackendServiceIamPolicyResult>;
/**
 * A collection of arguments for invoking getBackendServiceIamPolicy.
 */
export interface GetBackendServiceIamPolicyOutputArgs {
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
