"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents an Instance Settings resource. Instance settings are centralized configuration parameters that allow users to configure the default values for specific VM parameters that are normally set using GCE instance API methods.
 *
 * To get more information about InstanceSettings, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/instanceSettings)
 * * How-to Guides
 *     * [Update Instance Settings](https://cloud.google.com/compute/docs/metadata/setting-custom-metadata#set-custom-project-zonal-metadata)
 *
 * ## Example Usage
 *
 * ### Instance Settings Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gceInstanceSettings = new gcp.compute.InstanceSettings("gce_instance_settings", {
 *     zone: "us-east7-b",
 *     metadata: {
 *         items: {
 *             foo: "baz",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * InstanceSettings can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/zones/{{zone}}/instanceSettings`
 *
 * * `{{project}}/{{zone}}`
 *
 * * `{{zone}}`
 *
 * When using the `pulumi import` command, InstanceSettings can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/instanceSettings:InstanceSettings default projects/{{project}}/zones/{{zone}}/instanceSettings
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/instanceSettings:InstanceSettings default {{project}}/{{zone}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/instanceSettings:InstanceSettings default {{zone}}
 * ```
 */
class InstanceSettings extends pulumi.CustomResource {
    /**
     * Get an existing InstanceSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new InstanceSettings(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of InstanceSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceSettings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["fingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceSettings.__pulumiType, name, resourceInputs, opts);
    }
}
exports.InstanceSettings = InstanceSettings;
/** @internal */
InstanceSettings.__pulumiType = 'gcp:compute/instanceSettings:InstanceSettings';
//# sourceMappingURL=instanceSettings.js.map