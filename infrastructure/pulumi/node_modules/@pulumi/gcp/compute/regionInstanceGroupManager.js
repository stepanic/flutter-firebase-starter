"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegionInstanceGroupManager = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The Google Compute Engine Regional Instance Group Manager API creates and manages pools
 * of homogeneous Compute Engine virtual machine instances from a common instance
 * template.
 *
 * To get more information about regionInstanceGroupManagers, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/latest/regionInstanceGroupManagers)
 * * How-to Guides
 *     * [Regional Instance Groups Guide](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups)
 *
 * > **Note:** Use [gcp.compute.InstanceGroupManager](https://www.terraform.io/docs/providers/google/r/compute_instance_group_manager.html) to create a zonal instance group manager.
 *
 * ## Example Usage
 *
 * ### With Top Level Instance Template (`Google` Provider)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const autohealing = new gcp.compute.HealthCheck("autohealing", {
 *     name: "autohealing-health-check",
 *     checkIntervalSec: 5,
 *     timeoutSec: 5,
 *     healthyThreshold: 2,
 *     unhealthyThreshold: 10,
 *     httpHealthCheck: {
 *         requestPath: "/healthz",
 *         port: 8080,
 *     },
 * });
 * const appserver = new gcp.compute.RegionInstanceGroupManager("appserver", {
 *     name: "appserver-igm",
 *     baseInstanceName: "app",
 *     region: "us-central1",
 *     distributionPolicyZones: [
 *         "us-central1-a",
 *         "us-central1-f",
 *     ],
 *     versions: [{
 *         instanceTemplate: appserverGoogleComputeInstanceTemplate.selfLinkUnique,
 *     }],
 *     allInstancesConfig: {
 *         metadata: {
 *             metadata_key: "metadata_value",
 *         },
 *         labels: {
 *             label_key: "label_value",
 *         },
 *     },
 *     targetPools: [appserverGoogleComputeTargetPool.id],
 *     targetSize: 2,
 *     namedPorts: [{
 *         name: "custom",
 *         port: 8888,
 *     }],
 *     autoHealingPolicies: {
 *         healthCheck: autohealing.id,
 *         initialDelaySec: 300,
 *     },
 * });
 * ```
 *
 * ### With Multiple Versions
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const appserver = new gcp.compute.RegionInstanceGroupManager("appserver", {
 *     name: "appserver-igm",
 *     baseInstanceName: "app",
 *     region: "us-central1",
 *     targetSize: 5,
 *     versions: [
 *         {
 *             instanceTemplate: appserverGoogleComputeInstanceTemplate.selfLinkUnique,
 *         },
 *         {
 *             instanceTemplate: appserver_canary.selfLinkUnique,
 *             targetSize: {
 *                 fixed: 1,
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ### With Standby Policy (`Google-Beta` Provider)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const igm_sr = new gcp.compute.RegionInstanceGroupManager("igm-sr", {
 *     name: "tf-sr-igm",
 *     baseInstanceName: "tf-sr-igm-instance",
 *     region: "us-central1",
 *     targetSize: 5,
 *     versions: [{
 *         instanceTemplate: sr_igm.selfLink,
 *         name: "primary",
 *     }],
 *     standbyPolicy: {
 *         initialDelaySec: 50,
 *         mode: "SCALE_OUT_POOL",
 *     },
 *     targetSuspendedSize: 1,
 *     targetStoppedSize: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Instance group managers can be imported using any of these accepted formats:
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, instance group managers can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager default {{name}}
 * ```
 */
class RegionInstanceGroupManager extends pulumi.CustomResource {
    /**
     * Get an existing RegionInstanceGroupManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RegionInstanceGroupManager(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RegionInstanceGroupManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegionInstanceGroupManager.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allInstancesConfig"] = state ? state.allInstancesConfig : undefined;
            resourceInputs["autoHealingPolicies"] = state ? state.autoHealingPolicies : undefined;
            resourceInputs["baseInstanceName"] = state ? state.baseInstanceName : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["distributionPolicyTargetShape"] = state ? state.distributionPolicyTargetShape : undefined;
            resourceInputs["distributionPolicyZones"] = state ? state.distributionPolicyZones : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["instanceGroup"] = state ? state.instanceGroup : undefined;
            resourceInputs["instanceLifecyclePolicy"] = state ? state.instanceLifecyclePolicy : undefined;
            resourceInputs["listManagedInstancesResults"] = state ? state.listManagedInstancesResults : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namedPorts"] = state ? state.namedPorts : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["standbyPolicy"] = state ? state.standbyPolicy : undefined;
            resourceInputs["statefulDisks"] = state ? state.statefulDisks : undefined;
            resourceInputs["statefulExternalIps"] = state ? state.statefulExternalIps : undefined;
            resourceInputs["statefulInternalIps"] = state ? state.statefulInternalIps : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["targetPools"] = state ? state.targetPools : undefined;
            resourceInputs["targetSize"] = state ? state.targetSize : undefined;
            resourceInputs["targetStoppedSize"] = state ? state.targetStoppedSize : undefined;
            resourceInputs["targetSuspendedSize"] = state ? state.targetSuspendedSize : undefined;
            resourceInputs["updatePolicy"] = state ? state.updatePolicy : undefined;
            resourceInputs["versions"] = state ? state.versions : undefined;
            resourceInputs["waitForInstances"] = state ? state.waitForInstances : undefined;
            resourceInputs["waitForInstancesStatus"] = state ? state.waitForInstancesStatus : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.baseInstanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseInstanceName'");
            }
            if ((!args || args.versions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versions'");
            }
            resourceInputs["allInstancesConfig"] = args ? args.allInstancesConfig : undefined;
            resourceInputs["autoHealingPolicies"] = args ? args.autoHealingPolicies : undefined;
            resourceInputs["baseInstanceName"] = args ? args.baseInstanceName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["distributionPolicyTargetShape"] = args ? args.distributionPolicyTargetShape : undefined;
            resourceInputs["distributionPolicyZones"] = args ? args.distributionPolicyZones : undefined;
            resourceInputs["instanceLifecyclePolicy"] = args ? args.instanceLifecyclePolicy : undefined;
            resourceInputs["listManagedInstancesResults"] = args ? args.listManagedInstancesResults : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namedPorts"] = args ? args.namedPorts : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["standbyPolicy"] = args ? args.standbyPolicy : undefined;
            resourceInputs["statefulDisks"] = args ? args.statefulDisks : undefined;
            resourceInputs["statefulExternalIps"] = args ? args.statefulExternalIps : undefined;
            resourceInputs["statefulInternalIps"] = args ? args.statefulInternalIps : undefined;
            resourceInputs["targetPools"] = args ? args.targetPools : undefined;
            resourceInputs["targetSize"] = args ? args.targetSize : undefined;
            resourceInputs["targetStoppedSize"] = args ? args.targetStoppedSize : undefined;
            resourceInputs["targetSuspendedSize"] = args ? args.targetSuspendedSize : undefined;
            resourceInputs["updatePolicy"] = args ? args.updatePolicy : undefined;
            resourceInputs["versions"] = args ? args.versions : undefined;
            resourceInputs["waitForInstances"] = args ? args.waitForInstances : undefined;
            resourceInputs["waitForInstancesStatus"] = args ? args.waitForInstancesStatus : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["instanceGroup"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegionInstanceGroupManager.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RegionInstanceGroupManager = RegionInstanceGroupManager;
/** @internal */
RegionInstanceGroupManager.__pulumiType = 'gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager';
//# sourceMappingURL=regionInstanceGroupManager.js.map