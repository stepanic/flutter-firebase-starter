import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 *
 * ### Router Route Policy Export
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const net = new gcp.compute.Network("net", {
 *     name: "my-network",
 *     autoCreateSubnetworks: false,
 * });
 * const subnet = new gcp.compute.Subnetwork("subnet", {
 *     name: "my-subnetwork",
 *     network: net.id,
 *     ipCidrRange: "10.0.0.0/16",
 *     region: "us-central1",
 * });
 * const router = new gcp.compute.Router("router", {
 *     name: "my-router",
 *     region: subnet.region,
 *     network: net.id,
 * });
 * const rp_export = new gcp.compute.RouterRoutePolicy("rp-export", {
 *     router: router.name,
 *     region: router.region,
 *     name: "my-rp1",
 *     type: "ROUTE_POLICY_TYPE_EXPORT",
 *     terms: [{
 *         priority: 1,
 *         match: {
 *             expression: "destination == '10.0.0.0/12'",
 *         },
 *         actions: [{
 *             expression: "accept()",
 *         }],
 *     }],
 * });
 * ```
 * ### Router Route Policy Import
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const net = new gcp.compute.Network("net", {
 *     name: "my-network",
 *     autoCreateSubnetworks: false,
 * });
 * const subnet = new gcp.compute.Subnetwork("subnet", {
 *     name: "my-subnetwork",
 *     network: net.id,
 *     ipCidrRange: "10.0.0.0/16",
 *     region: "us-central1",
 * });
 * const router = new gcp.compute.Router("router", {
 *     name: "my-router",
 *     region: subnet.region,
 *     network: net.id,
 * });
 * const rp_import = new gcp.compute.RouterRoutePolicy("rp-import", {
 *     name: "my-rp2",
 *     router: router.name,
 *     region: router.region,
 *     type: "ROUTE_POLICY_TYPE_IMPORT",
 *     terms: [{
 *         priority: 2,
 *         match: {
 *             expression: "destination == '10.0.0.0/12'",
 *         },
 *         actions: [{
 *             expression: "accept()",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * RouterRoutePolicy can be imported using any of these accepted formats:
 *
 * * `{{project}}/{{region}}/{{router}}/routePolicies/{{name}}`
 *
 * * `{{project}}/{{region}}/{{router}}/{{name}}`
 *
 * * `{{region}}/{{router}}/{{name}}`
 *
 * * `{{router}}/{{name}}`
 *
 * When using the `pulumi import` command, RouterRoutePolicy can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/routerRoutePolicy:RouterRoutePolicy default {{project}}/{{region}}/{{router}}/routePolicies/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/routerRoutePolicy:RouterRoutePolicy default {{project}}/{{region}}/{{router}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/routerRoutePolicy:RouterRoutePolicy default {{region}}/{{router}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/routerRoutePolicy:RouterRoutePolicy default {{router}}/{{name}}
 * ```
 */
export declare class RouterRoutePolicy extends pulumi.CustomResource {
    /**
     * Get an existing RouterRoutePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterRoutePolicyState, opts?: pulumi.CustomResourceOptions): RouterRoutePolicy;
    /**
     * Returns true if the given object is an instance of RouterRoutePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RouterRoutePolicy;
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     */
    readonly fingerprint: pulumi.Output<string>;
    /**
     * Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
     */
    readonly name: pulumi.Output<string>;
    readonly project: pulumi.Output<string>;
    /**
     * Region where the router and NAT reside.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The name of the Cloud Router in which this route policy will be configured.
     */
    readonly router: pulumi.Output<string>;
    /**
     * List of terms (the order in the list is not important, they are evaluated in order of priority).
     * Structure is documented below.
     */
    readonly terms: pulumi.Output<outputs.compute.RouterRoutePolicyTerm[]>;
    /**
     * This is policy's type, which is one of IMPORT or EXPORT Possible values: ["ROUTE_POLICY_TYPE_IMPORT",
     * "ROUTE_POLICY_TYPE_EXPORT"]
     */
    readonly type: pulumi.Output<string | undefined>;
    /**
     * Create a RouterRoutePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterRoutePolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering RouterRoutePolicy resources.
 */
export interface RouterRoutePolicyState {
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Region where the router and NAT reside.
     */
    region?: pulumi.Input<string>;
    /**
     * The name of the Cloud Router in which this route policy will be configured.
     */
    router?: pulumi.Input<string>;
    /**
     * List of terms (the order in the list is not important, they are evaluated in order of priority).
     * Structure is documented below.
     */
    terms?: pulumi.Input<pulumi.Input<inputs.compute.RouterRoutePolicyTerm>[]>;
    /**
     * This is policy's type, which is one of IMPORT or EXPORT Possible values: ["ROUTE_POLICY_TYPE_IMPORT",
     * "ROUTE_POLICY_TYPE_EXPORT"]
     */
    type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a RouterRoutePolicy resource.
 */
export interface RouterRoutePolicyArgs {
    /**
     * Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Region where the router and NAT reside.
     */
    region?: pulumi.Input<string>;
    /**
     * The name of the Cloud Router in which this route policy will be configured.
     */
    router: pulumi.Input<string>;
    /**
     * List of terms (the order in the list is not important, they are evaluated in order of priority).
     * Structure is documented below.
     */
    terms: pulumi.Input<pulumi.Input<inputs.compute.RouterRoutePolicyTerm>[]>;
    /**
     * This is policy's type, which is one of IMPORT or EXPORT Possible values: ["ROUTE_POLICY_TYPE_IMPORT",
     * "ROUTE_POLICY_TYPE_EXPORT"]
     */
    type?: pulumi.Input<string>;
}
