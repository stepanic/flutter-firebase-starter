"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryType = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * An Entry Type is a template for creating Entries.
 *
 * ## Example Usage
 *
 * ### Dataplex Entry Type Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testEntryTypeBasic = new gcp.dataplex.EntryType("test_entry_type_basic", {
 *     entryTypeId: "entry-type-basic",
 *     project: "my-project-name",
 *     location: "us-central1",
 * });
 * ```
 * ### Dataplex Entry Type Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testEntryTypeFull = new gcp.dataplex.AspectType("test_entry_type_full", {
 *     aspectTypeId: "tf-test-aspect-type_22811",
 *     location: "us-central1",
 *     project: "my-project-name",
 *     metadataTemplate: `{
 *   "name": "tf-test-template",
 *   "type": "record",
 *   "recordFields": [
 *     {
 *       "name": "type",
 *       "type": "enum",
 *       "annotations": {
 *         "displayName": "Type",
 *         "description": "Specifies the type of view represented by the entry."
 *       },
 *       "index": 1,
 *       "constraints": {
 *         "required": true
 *       },
 *       "enumValues": [
 *         {
 *           "name": "VIEW",
 *           "index": 1
 *         }
 *       ]
 *     }
 *   ]
 * }
 * `,
 * });
 * const testEntryTypeFullEntryType = new gcp.dataplex.EntryType("test_entry_type_full", {
 *     entryTypeId: "entry-type-full",
 *     project: "my-project-name",
 *     location: "us-central1",
 *     labels: {
 *         tag: "test-tf",
 *     },
 *     displayName: "terraform entry type",
 *     description: "entry type created by Terraform",
 *     typeAliases: [
 *         "TABLE",
 *         "DATABASE",
 *     ],
 *     platform: "GCS",
 *     system: "CloudSQL",
 *     requiredAspects: [{
 *         type: testEntryTypeFull.name,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * EntryType can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}`
 *
 * * `{{project}}/{{location}}/{{entry_type_id}}`
 *
 * * `{{location}}/{{entry_type_id}}`
 *
 * When using the `pulumi import` command, EntryType can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:dataplex/entryType:EntryType default projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataplex/entryType:EntryType default {{project}}/{{location}}/{{entry_type_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataplex/entryType:EntryType default {{location}}/{{entry_type_id}}
 * ```
 */
class EntryType extends pulumi.CustomResource {
    /**
     * Get an existing EntryType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EntryType(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EntryType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntryType.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["entryTypeId"] = state ? state.entryTypeId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["requiredAspects"] = state ? state.requiredAspects : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
            resourceInputs["typeAliases"] = state ? state.typeAliases : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["entryTypeId"] = args ? args.entryTypeId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requiredAspects"] = args ? args.requiredAspects : undefined;
            resourceInputs["system"] = args ? args.system : undefined;
            resourceInputs["typeAliases"] = args ? args.typeAliases : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EntryType.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EntryType = EntryType;
/** @internal */
EntryType.__pulumiType = 'gcp:dataplex/entryType:EntryType';
//# sourceMappingURL=entryType.js.map