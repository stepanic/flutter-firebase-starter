import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network.
 *
 * To get more information about PrivateConnection, see:
 *
 * * [API documentation](https://cloud.google.com/datastream/docs/reference/rest/v1/projects.locations.privateConnections)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/datastream/docs/create-a-private-connectivity-configuration)
 *
 * ## Example Usage
 *
 * ### Datastream Private Connection Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("default", {name: "my-network"});
 * const _default = new gcp.datastream.PrivateConnection("default", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     privateConnectionId: "my-connection",
 *     labels: {
 *         key: "value",
 *     },
 *     vpcPeeringConfig: {
 *         vpc: defaultNetwork.id,
 *         subnet: "10.0.0.0/29",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * PrivateConnection can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/privateConnections/{{private_connection_id}}`
 *
 * * `{{project}}/{{location}}/{{private_connection_id}}`
 *
 * * `{{location}}/{{private_connection_id}}`
 *
 * When using the `pulumi import` command, PrivateConnection can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:datastream/privateConnection:PrivateConnection default projects/{{project}}/locations/{{location}}/privateConnections/{{private_connection_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:datastream/privateConnection:PrivateConnection default {{project}}/{{location}}/{{private_connection_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:datastream/privateConnection:PrivateConnection default {{location}}/{{private_connection_id}}
 * ```
 */
export declare class PrivateConnection extends pulumi.CustomResource {
    /**
     * Get an existing PrivateConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateConnectionState, opts?: pulumi.CustomResourceOptions): PrivateConnection;
    /**
     * Returns true if the given object is an instance of PrivateConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PrivateConnection;
    /**
     * If set to true, will skip validations.
     */
    readonly createWithoutValidation: pulumi.Output<boolean | undefined>;
    /**
     * Display name.
     */
    readonly displayName: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    readonly effectiveLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The PrivateConnection error in case of failure.
     * Structure is documented below.
     */
    readonly errors: pulumi.Output<outputs.datastream.PrivateConnectionError[]>;
    /**
     * Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The name of the location this private connection is located in.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The resource's name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The private connectivity identifier.
     */
    readonly privateConnectionId: pulumi.Output<string>;
    readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    readonly pulumiLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * State of the PrivateConnection.
     */
    readonly state: pulumi.Output<string>;
    /**
     * The VPC Peering configuration is used to create VPC peering
     * between Datastream and the consumer's VPC.
     * Structure is documented below.
     */
    readonly vpcPeeringConfig: pulumi.Output<outputs.datastream.PrivateConnectionVpcPeeringConfig>;
    /**
     * Create a PrivateConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateConnectionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering PrivateConnection resources.
 */
export interface PrivateConnectionState {
    /**
     * If set to true, will skip validations.
     */
    createWithoutValidation?: pulumi.Input<boolean>;
    /**
     * Display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The PrivateConnection error in case of failure.
     * Structure is documented below.
     */
    errors?: pulumi.Input<pulumi.Input<inputs.datastream.PrivateConnectionError>[]>;
    /**
     * Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of the location this private connection is located in.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The private connectivity identifier.
     */
    privateConnectionId?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * State of the PrivateConnection.
     */
    state?: pulumi.Input<string>;
    /**
     * The VPC Peering configuration is used to create VPC peering
     * between Datastream and the consumer's VPC.
     * Structure is documented below.
     */
    vpcPeeringConfig?: pulumi.Input<inputs.datastream.PrivateConnectionVpcPeeringConfig>;
}
/**
 * The set of arguments for constructing a PrivateConnection resource.
 */
export interface PrivateConnectionArgs {
    /**
     * If set to true, will skip validations.
     */
    createWithoutValidation?: pulumi.Input<boolean>;
    /**
     * Display name.
     */
    displayName: pulumi.Input<string>;
    /**
     * Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of the location this private connection is located in.
     */
    location: pulumi.Input<string>;
    /**
     * The private connectivity identifier.
     */
    privateConnectionId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The VPC Peering configuration is used to create VPC peering
     * between Datastream and the consumer's VPC.
     * Structure is documented below.
     */
    vpcPeeringConfig: pulumi.Input<inputs.datastream.PrivateConnectionVpcPeeringConfig>;
}
