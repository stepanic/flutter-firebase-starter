"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CxSecuritySettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents the settings related to security issues, such as data redaction and data retention. It may take hours for updates on the settings to propagate to all the related components and take effect.
 * Multiple security settings can be configured in each location. Each agent can specify the security settings to apply, and each setting can be applied to multiple agents in the same project and location.
 *
 * To get more information about SecuritySettings, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.securitySettings)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *
 * ## Example Usage
 *
 * ### Dialogflowcx Security Settings Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basicSecuritySettings = new gcp.diagflow.CxSecuritySettings("basic_security_settings", {
 *     displayName: "dialogflowcx-security-settings",
 *     location: "global",
 *     purgeDataTypes: [],
 *     retentionWindowDays: 7,
 * });
 * ```
 * ### Dialogflowcx Security Settings Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const inspect = new gcp.dataloss.PreventionInspectTemplate("inspect", {
 *     parent: "projects/my-project-name/locations/global",
 *     displayName: "dialogflowcx-inspect-template",
 *     inspectConfig: {
 *         infoTypes: [{
 *             name: "EMAIL_ADDRESS",
 *         }],
 *     },
 * });
 * const deidentify = new gcp.dataloss.PreventionDeidentifyTemplate("deidentify", {
 *     parent: "projects/my-project-name/locations/global",
 *     displayName: "dialogflowcx-deidentify-template",
 *     deidentifyConfig: {
 *         infoTypeTransformations: {
 *             transformations: [{
 *                 primitiveTransformation: {
 *                     replaceConfig: {
 *                         newValue: {
 *                             stringValue: "[REDACTED]",
 *                         },
 *                     },
 *                 },
 *             }],
 *         },
 *     },
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     name: "dialogflowcx-bucket",
 *     location: "US",
 *     uniformBucketLevelAccess: true,
 * });
 * const basicSecuritySettings = new gcp.diagflow.CxSecuritySettings("basic_security_settings", {
 *     displayName: "dialogflowcx-security-settings",
 *     location: "global",
 *     redactionStrategy: "REDACT_WITH_SERVICE",
 *     redactionScope: "REDACT_DISK_STORAGE",
 *     inspectTemplate: inspect.id,
 *     deidentifyTemplate: deidentify.id,
 *     purgeDataTypes: ["DIALOGFLOW_HISTORY"],
 *     audioExportSettings: {
 *         gcsBucket: bucket.id,
 *         audioExportPattern: "export",
 *         enableAudioRedaction: true,
 *         audioFormat: "OGG",
 *     },
 *     insightsExportSettings: {
 *         enableInsightsExport: true,
 *     },
 *     retentionStrategy: "REMOVE_AFTER_CONVERSATION",
 * });
 * ```
 *
 * ## Import
 *
 * SecuritySettings can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/securitySettings/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, SecuritySettings can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxSecuritySettings:CxSecuritySettings default projects/{{project}}/locations/{{location}}/securitySettings/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxSecuritySettings:CxSecuritySettings default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxSecuritySettings:CxSecuritySettings default {{location}}/{{name}}
 * ```
 */
class CxSecuritySettings extends pulumi.CustomResource {
    /**
     * Get an existing CxSecuritySettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CxSecuritySettings(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CxSecuritySettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CxSecuritySettings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["audioExportSettings"] = state ? state.audioExportSettings : undefined;
            resourceInputs["deidentifyTemplate"] = state ? state.deidentifyTemplate : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["insightsExportSettings"] = state ? state.insightsExportSettings : undefined;
            resourceInputs["inspectTemplate"] = state ? state.inspectTemplate : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["purgeDataTypes"] = state ? state.purgeDataTypes : undefined;
            resourceInputs["redactionScope"] = state ? state.redactionScope : undefined;
            resourceInputs["redactionStrategy"] = state ? state.redactionStrategy : undefined;
            resourceInputs["retentionStrategy"] = state ? state.retentionStrategy : undefined;
            resourceInputs["retentionWindowDays"] = state ? state.retentionWindowDays : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["audioExportSettings"] = args ? args.audioExportSettings : undefined;
            resourceInputs["deidentifyTemplate"] = args ? args.deidentifyTemplate : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["insightsExportSettings"] = args ? args.insightsExportSettings : undefined;
            resourceInputs["inspectTemplate"] = args ? args.inspectTemplate : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["purgeDataTypes"] = args ? args.purgeDataTypes : undefined;
            resourceInputs["redactionScope"] = args ? args.redactionScope : undefined;
            resourceInputs["redactionStrategy"] = args ? args.redactionStrategy : undefined;
            resourceInputs["retentionStrategy"] = args ? args.retentionStrategy : undefined;
            resourceInputs["retentionWindowDays"] = args ? args.retentionWindowDays : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CxSecuritySettings.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CxSecuritySettings = CxSecuritySettings;
/** @internal */
CxSecuritySettings.__pulumiType = 'gcp:diagflow/cxSecuritySettings:CxSecuritySettings';
//# sourceMappingURL=cxSecuritySettings.js.map