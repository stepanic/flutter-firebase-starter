"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CxTestCase = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * You can use the built-in test feature to uncover bugs and prevent regressions. A test execution verifies that agent responses have not changed for end-user inputs defined in the test case.
 *
 * To get more information about TestCase, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.testCases)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *
 * ## Example Usage
 *
 * ### Dialogflowcx Test Case Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     supportedLanguageCodes: [
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 *     avatarUri: "https://storage.cloud.google.com/dialogflow-test-host-image/cloud-logo.png",
 *     enableStackdriverLogging: true,
 *     enableSpellCorrection: true,
 *     speechToTextSettings: {
 *         enableSpeechAdaptation: true,
 *     },
 * });
 * const intent = new gcp.diagflow.CxIntent("intent", {
 *     parent: agent.id,
 *     displayName: "MyIntent",
 *     priority: 1,
 *     trainingPhrases: [{
 *         parts: [{
 *             text: "training phrase",
 *         }],
 *         repeatCount: 1,
 *     }],
 * });
 * const page = new gcp.diagflow.CxPage("page", {
 *     parent: agent.startFlow,
 *     displayName: "MyPage",
 *     transitionRoutes: [{
 *         intent: intent.id,
 *         triggerFulfillment: {
 *             messages: [{
 *                 text: {
 *                     texts: ["Training phrase response"],
 *                 },
 *             }],
 *         },
 *     }],
 *     eventHandlers: [{
 *         event: "some-event",
 *         triggerFulfillment: {
 *             messages: [{
 *                 text: {
 *                     texts: ["Handling some event"],
 *                 },
 *             }],
 *         },
 *     }],
 * });
 * const basicTestCase = new gcp.diagflow.CxTestCase("basic_test_case", {
 *     parent: agent.id,
 *     displayName: "MyTestCase",
 *     tags: ["#tag1"],
 *     notes: "demonstrates a simple training phrase response",
 *     testConfig: {
 *         trackingParameters: ["some_param"],
 *         page: page.id,
 *     },
 *     testCaseConversationTurns: [
 *         {
 *             userInput: {
 *                 input: {
 *                     languageCode: "en",
 *                     text: {
 *                         text: "training phrase",
 *                     },
 *                 },
 *                 injectedParameters: JSON.stringify({
 *                     some_param: "1",
 *                 }),
 *                 isWebhookEnabled: true,
 *                 enableSentimentAnalysis: true,
 *             },
 *             virtualAgentOutput: {
 *                 sessionParameters: JSON.stringify({
 *                     some_param: "1",
 *                 }),
 *                 triggeredIntent: {
 *                     name: intent.id,
 *                 },
 *                 currentPage: {
 *                     name: page.id,
 *                 },
 *                 textResponses: [{
 *                     texts: ["Training phrase response"],
 *                 }],
 *             },
 *         },
 *         {
 *             userInput: {
 *                 input: {
 *                     event: {
 *                         event: "some-event",
 *                     },
 *                 },
 *             },
 *             virtualAgentOutput: {
 *                 currentPage: {
 *                     name: page.id,
 *                 },
 *                 textResponses: [{
 *                     texts: ["Handling some event"],
 *                 }],
 *             },
 *         },
 *         {
 *             userInput: {
 *                 input: {
 *                     dtmf: {
 *                         digits: "12",
 *                         finishDigit: "3",
 *                     },
 *                 },
 *             },
 *             virtualAgentOutput: {
 *                 textResponses: [{
 *                     texts: ["I didn't get that. Can you say it again?"],
 *                 }],
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * TestCase can be imported using any of these accepted formats:
 *
 * * `{{parent}}/testCases/{{name}}`
 *
 * When using the `pulumi import` command, TestCase can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxTestCase:CxTestCase default {{parent}}/testCases/{{name}}
 * ```
 */
class CxTestCase extends pulumi.CustomResource {
    /**
     * Get an existing CxTestCase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CxTestCase(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CxTestCase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CxTestCase.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["lastTestResults"] = state ? state.lastTestResults : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["testCaseConversationTurns"] = state ? state.testCaseConversationTurns : undefined;
            resourceInputs["testConfig"] = state ? state.testConfig : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["testCaseConversationTurns"] = args ? args.testCaseConversationTurns : undefined;
            resourceInputs["testConfig"] = args ? args.testConfig : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["lastTestResults"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CxTestCase.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CxTestCase = CxTestCase;
/** @internal */
CxTestCase.__pulumiType = 'gcp:diagflow/cxTestCase:CxTestCase';
//# sourceMappingURL=cxTestCase.js.map