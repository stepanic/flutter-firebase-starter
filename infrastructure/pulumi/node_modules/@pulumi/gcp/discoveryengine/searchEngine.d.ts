import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Vertex AI Search and Conversation can be used to create a search engine or a chat application by connecting it with a datastore
 *
 * To get more information about SearchEngine, see:
 *
 * * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.engines)
 * * How-to Guides
 *     * [Create a Search Engine](https://cloud.google.com/generative-ai-app-builder/docs/create-engine-es)
 *
 * ## Example Usage
 *
 * ### Discoveryengine Searchengine Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.discoveryengine.DataStore("basic", {
 *     location: "global",
 *     dataStoreId: "example-datastore-id",
 *     displayName: "tf-test-structured-datastore",
 *     industryVertical: "GENERIC",
 *     contentConfig: "NO_CONTENT",
 *     solutionTypes: ["SOLUTION_TYPE_SEARCH"],
 *     createAdvancedSiteSearch: false,
 * });
 * const basicSearchEngine = new gcp.discoveryengine.SearchEngine("basic", {
 *     engineId: "example-engine-id",
 *     collectionId: "default_collection",
 *     location: basic.location,
 *     displayName: "Example Display Name",
 *     dataStoreIds: [basic.dataStoreId],
 *     searchEngineConfig: {},
 * });
 * ```
 *
 * ## Import
 *
 * SearchEngine can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}`
 *
 * * `{{project}}/{{location}}/{{collection_id}}/{{engine_id}}`
 *
 * * `{{location}}/{{collection_id}}/{{engine_id}}`
 *
 * When using the `pulumi import` command, SearchEngine can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default {{project}}/{{location}}/{{collection_id}}/{{engine_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default {{location}}/{{collection_id}}/{{engine_id}}
 * ```
 */
export declare class SearchEngine extends pulumi.CustomResource {
    /**
     * Get an existing SearchEngine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SearchEngineState, opts?: pulumi.CustomResourceOptions): SearchEngine;
    /**
     * Returns true if the given object is an instance of SearchEngine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SearchEngine;
    /**
     * The collection ID.
     */
    readonly collectionId: pulumi.Output<string>;
    /**
     * Common config spec that specifies the metadata of the engine.
     */
    readonly commonConfig: pulumi.Output<outputs.discoveryengine.SearchEngineCommonConfig | undefined>;
    /**
     * Timestamp the Engine was created at.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
     */
    readonly dataStoreIds: pulumi.Output<string[]>;
    /**
     * Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     */
    readonly displayName: pulumi.Output<string>;
    /**
     * Unique ID to use for Search Engine App.
     */
    readonly engineId: pulumi.Output<string>;
    /**
     * The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
     * If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
     * Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA"]
     */
    readonly industryVertical: pulumi.Output<string | undefined>;
    /**
     * Location.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The unique full resource name of the search engine. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     */
    readonly name: pulumi.Output<string>;
    readonly project: pulumi.Output<string>;
    /**
     * Configurations for a Search Engine.
     * Structure is documented below.
     */
    readonly searchEngineConfig: pulumi.Output<outputs.discoveryengine.SearchEngineSearchEngineConfig>;
    /**
     * Timestamp the Engine was last updated.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a SearchEngine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SearchEngineArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SearchEngine resources.
 */
export interface SearchEngineState {
    /**
     * The collection ID.
     */
    collectionId?: pulumi.Input<string>;
    /**
     * Common config spec that specifies the metadata of the engine.
     */
    commonConfig?: pulumi.Input<inputs.discoveryengine.SearchEngineCommonConfig>;
    /**
     * Timestamp the Engine was created at.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
     */
    dataStoreIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Unique ID to use for Search Engine App.
     */
    engineId?: pulumi.Input<string>;
    /**
     * The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
     * If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
     * Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA"]
     */
    industryVertical?: pulumi.Input<string>;
    /**
     * Location.
     */
    location?: pulumi.Input<string>;
    /**
     * The unique full resource name of the search engine. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Configurations for a Search Engine.
     * Structure is documented below.
     */
    searchEngineConfig?: pulumi.Input<inputs.discoveryengine.SearchEngineSearchEngineConfig>;
    /**
     * Timestamp the Engine was last updated.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SearchEngine resource.
 */
export interface SearchEngineArgs {
    /**
     * The collection ID.
     */
    collectionId: pulumi.Input<string>;
    /**
     * Common config spec that specifies the metadata of the engine.
     */
    commonConfig?: pulumi.Input<inputs.discoveryengine.SearchEngineCommonConfig>;
    /**
     * The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
     */
    dataStoreIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * Unique ID to use for Search Engine App.
     */
    engineId: pulumi.Input<string>;
    /**
     * The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
     * If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
     * Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA"]
     */
    industryVertical?: pulumi.Input<string>;
    /**
     * Location.
     */
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Configurations for a Search Engine.
     * Structure is documented below.
     */
    searchEngineConfig: pulumi.Input<inputs.discoveryengine.SearchEngineSearchEngineConfig>;
}
