"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subnet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Distributed Cloud Edge subnet, which provides L2 isolation within a network.
 *
 * To get more information about Subnet, see:
 *
 * * [API documentation](https://cloud.google.com/distributed-cloud/edge/latest/docs/reference/network/rest/v1/projects.locations.zones.subnets)
 * * How-to Guides
 *     * [Create and manage subnetworks](https://cloud.google.com/distributed-cloud/edge/latest/docs/subnetworks#api)
 *
 * ## Example Usage
 *
 * ### Edgenetwork Subnet
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleNetwork = new gcp.edgenetwork.Network("example_network", {
 *     networkId: "example-network",
 *     location: "us-west1",
 *     zone: "",
 *     description: "Example network.",
 *     mtu: 9000,
 * });
 * const exampleSubnet = new gcp.edgenetwork.Subnet("example_subnet", {
 *     subnetId: "example-subnet",
 *     location: "us-west1",
 *     zone: "",
 *     description: "Example subnet.",
 *     network: exampleNetwork.id,
 *     ipv4Cidrs: ["4.4.4.1/24"],
 *     labels: {
 *         environment: "dev",
 *     },
 * });
 * ```
 * ### Edgenetwork Subnet With Vlan Id
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleNetwork = new gcp.edgenetwork.Network("example_network", {
 *     networkId: "example-network",
 *     location: "us-west1",
 *     zone: "",
 *     description: "Example network.",
 *     mtu: 9000,
 * });
 * const exampleSubnetWithVlanId = new gcp.edgenetwork.Subnet("example_subnet_with_vlan_id", {
 *     subnetId: "example-subnet-with-vlan-id",
 *     location: "us-west1",
 *     zone: "",
 *     description: "Example subnet with VLAN ID.",
 *     network: exampleNetwork.id,
 *     ipv6Cidrs: ["4444:4444:4444:4444::1/64"],
 *     vlanId: 44,
 *     labels: {
 *         environment: "dev",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Subnet can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/zones/{{zone}}/subnets/{{subnet_id}}`
 *
 * * `{{project}}/{{location}}/{{zone}}/{{subnet_id}}`
 *
 * * `{{location}}/{{zone}}/{{subnet_id}}`
 *
 * * `{{location}}/{{subnet_id}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, Subnet can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:edgenetwork/subnet:Subnet default projects/{{project}}/locations/{{location}}/zones/{{zone}}/subnets/{{subnet_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:edgenetwork/subnet:Subnet default {{project}}/{{location}}/{{zone}}/{{subnet_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:edgenetwork/subnet:Subnet default {{location}}/{{zone}}/{{subnet_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:edgenetwork/subnet:Subnet default {{location}}/{{subnet_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:edgenetwork/subnet:Subnet default {{name}}
 * ```
 */
class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Subnet(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipv4Cidrs"] = state ? state.ipv4Cidrs : undefined;
            resourceInputs["ipv6Cidrs"] = state ? state.ipv6Cidrs : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipv4Cidrs"] = args ? args.ipv4Cidrs : undefined;
            resourceInputs["ipv6Cidrs"] = args ? args.ipv6Cidrs : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Subnet = Subnet;
/** @internal */
Subnet.__pulumiType = 'gcp:edgenetwork/subnet:Subnet';
//# sourceMappingURL=subnet.js.map