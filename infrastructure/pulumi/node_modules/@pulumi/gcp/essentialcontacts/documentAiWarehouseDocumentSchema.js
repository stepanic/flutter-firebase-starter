"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentAiWarehouseDocumentSchema = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A document schema is used to define document structure.
 *
 * To get more information about DocumentSchema, see:
 *
 * * [API documentation](https://cloud.google.com/document-warehouse/docs/reference/rest/v1/projects.locations.documentSchemas)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/document-warehouse/docs/manage-document-schemas)
 *
 * ## Example Usage
 *
 * ### Document Ai Warehouse Document Schema Text
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleText = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("example_text", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-text",
 *     location: "us",
 *     documentIsFolder: false,
 *     propertyDefinitions: [{
 *         name: "prop3",
 *         displayName: "propdisp3",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         textTypeOptions: {},
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DocumentSchema can be imported using any of these accepted formats:
 *
 * * `projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}`
 *
 * * `{{project_number}}/{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, DocumentSchema can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema default projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema default {{project_number}}/{{location}}/{{name}}
 * ```
 */
class DocumentAiWarehouseDocumentSchema extends pulumi.CustomResource {
    /**
     * Get an existing DocumentAiWarehouseDocumentSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DocumentAiWarehouseDocumentSchema(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DocumentAiWarehouseDocumentSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DocumentAiWarehouseDocumentSchema.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["documentIsFolder"] = state ? state.documentIsFolder : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectNumber"] = state ? state.projectNumber : undefined;
            resourceInputs["propertyDefinitions"] = state ? state.propertyDefinitions : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.projectNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectNumber'");
            }
            if ((!args || args.propertyDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'propertyDefinitions'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["documentIsFolder"] = args ? args.documentIsFolder : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["projectNumber"] = args ? args.projectNumber : undefined;
            resourceInputs["propertyDefinitions"] = args ? args.propertyDefinitions : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DocumentAiWarehouseDocumentSchema.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DocumentAiWarehouseDocumentSchema = DocumentAiWarehouseDocumentSchema;
/** @internal */
DocumentAiWarehouseDocumentSchema.__pulumiType = 'gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema';
//# sourceMappingURL=documentAiWarehouseDocumentSchema.js.map