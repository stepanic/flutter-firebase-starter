"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppCheckPlayIntegrityConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * An app's Play Integrity configuration object. Note that your registered SHA-256 certificate fingerprints are used to validate tokens issued by the Play Integrity API.
 * Make sure your `gcp.firebase.AndroidApp` has at least one `sha256Hashes` present.
 *
 * To get more information about PlayIntegrityConfig, see:
 *
 * * [API documentation](https://firebase.google.com/docs/reference/appcheck/rest/v1/projects.apps.playIntegrityConfig)
 * * How-to Guides
 *     * [Official Documentation](https://firebase.google.com/docs/app-check)
 *
 * ## Example Usage
 *
 * ### Firebase App Check Play Integrity Config Minimal
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumi/time";
 *
 * // Enables the Play Integrity API
 * const playIntegrity = new gcp.projects.Service("play_integrity", {
 *     project: "my-project-name",
 *     service: "playintegrity.googleapis.com",
 *     disableOnDestroy: false,
 * });
 * const _default = new gcp.firebase.AndroidApp("default", {
 *     project: "my-project-name",
 *     displayName: "Play Integrity app",
 *     packageName: "package.name.playintegrity",
 *     sha1Hashes: ["2145bdf698b8715039bd0e83f2069bed435ac21c"],
 *     sha256Hashes: ["2145bdf698b8715039bd0e83f2069bed435ac21ca1b2c3d4e5f6123456789abc"],
 * });
 * // It takes a while for App Check to recognize the new app
 * // If your app already exists, you don't have to wait 30 seconds.
 * const wait30s = new time.index.Sleep("wait_30s", {createDuration: "30s"}, {
 *     dependsOn: [_default],
 * });
 * const defaultAppCheckPlayIntegrityConfig = new gcp.firebase.AppCheckPlayIntegrityConfig("default", {
 *     project: "my-project-name",
 *     appId: _default.appId,
 * }, {
 *     dependsOn: [wait30s],
 * });
 * ```
 * ### Firebase App Check Play Integrity Config Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumi/time";
 *
 * // Enables the Play Integrity API
 * const playIntegrity = new gcp.projects.Service("play_integrity", {
 *     project: "my-project-name",
 *     service: "playintegrity.googleapis.com",
 *     disableOnDestroy: false,
 * });
 * const _default = new gcp.firebase.AndroidApp("default", {
 *     project: "my-project-name",
 *     displayName: "Play Integrity app",
 *     packageName: "package.name.playintegrity",
 *     sha1Hashes: ["2145bdf698b8715039bd0e83f2069bed435ac21c"],
 *     sha256Hashes: ["2145bdf698b8715039bd0e83f2069bed435ac21ca1b2c3d4e5f6123456789abc"],
 * });
 * // It takes a while for App Check to recognize the new app
 * // If your app already exists, you don't have to wait 30 seconds.
 * const wait30s = new time.index.Sleep("wait_30s", {createDuration: "30s"}, {
 *     dependsOn: [_default],
 * });
 * const defaultAppCheckPlayIntegrityConfig = new gcp.firebase.AppCheckPlayIntegrityConfig("default", {
 *     project: "my-project-name",
 *     appId: _default.appId,
 *     tokenTtl: "7200s",
 * }, {
 *     dependsOn: [wait30s],
 * });
 * ```
 *
 * ## Import
 *
 * PlayIntegrityConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/apps/{{app_id}}/playIntegrityConfig`
 *
 * * `{{project}}/{{app_id}}`
 *
 * * `{{app_id}}`
 *
 * When using the `pulumi import` command, PlayIntegrityConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:firebase/appCheckPlayIntegrityConfig:AppCheckPlayIntegrityConfig default projects/{{project}}/apps/{{app_id}}/playIntegrityConfig
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firebase/appCheckPlayIntegrityConfig:AppCheckPlayIntegrityConfig default {{project}}/{{app_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firebase/appCheckPlayIntegrityConfig:AppCheckPlayIntegrityConfig default {{app_id}}
 * ```
 */
class AppCheckPlayIntegrityConfig extends pulumi.CustomResource {
    /**
     * Get an existing AppCheckPlayIntegrityConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AppCheckPlayIntegrityConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AppCheckPlayIntegrityConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppCheckPlayIntegrityConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["tokenTtl"] = state ? state.tokenTtl : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppCheckPlayIntegrityConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AppCheckPlayIntegrityConfig = AppCheckPlayIntegrityConfig;
/** @internal */
AppCheckPlayIntegrityConfig.__pulumiType = 'gcp:firebase/appCheckPlayIntegrityConfig:AppCheckPlayIntegrityConfig';
//# sourceMappingURL=appCheckPlayIntegrityConfig.js.map