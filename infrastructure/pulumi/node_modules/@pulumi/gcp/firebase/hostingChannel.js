"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostingChannel = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ### Firebasehosting Channel Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.firebase.HostingSite("default", {
 *     project: "my-project-name",
 *     siteId: "site-with-channel",
 * });
 * const defaultHostingChannel = new gcp.firebase.HostingChannel("default", {
 *     siteId: _default.siteId,
 *     channelId: "channel-basic",
 * });
 * ```
 * ### Firebasehosting Channel Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.firebase.HostingSite("default", {
 *     project: "my-project-name",
 *     siteId: "site-with-channel",
 * });
 * const full = new gcp.firebase.HostingChannel("full", {
 *     siteId: _default.siteId,
 *     channelId: "channel-full",
 *     ttl: "86400s",
 *     retainedReleaseCount: 20,
 *     labels: {
 *         "some-key": "some-value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Channel can be imported using any of these accepted formats:
 *
 * * `sites/{{site_id}}/channels/{{channel_id}}`
 *
 * * `{{site_id}}/{{channel_id}}`
 *
 * When using the `pulumi import` command, Channel can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:firebase/hostingChannel:HostingChannel default sites/{{site_id}}/channels/{{channel_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firebase/hostingChannel:HostingChannel default {{site_id}}/{{channel_id}}
 * ```
 */
class HostingChannel extends pulumi.CustomResource {
    /**
     * Get an existing HostingChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new HostingChannel(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HostingChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostingChannel.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["channelId"] = state ? state.channelId : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["retainedReleaseCount"] = state ? state.retainedReleaseCount : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.channelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["expireTime"] = args ? args.expireTime : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["retainedReleaseCount"] = args ? args.retainedReleaseCount : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HostingChannel.__pulumiType, name, resourceInputs, opts);
    }
}
exports.HostingChannel = HostingChannel;
/** @internal */
HostingChannel.__pulumiType = 'gcp:firebase/hostingChannel:HostingChannel';
//# sourceMappingURL=hostingChannel.js.map