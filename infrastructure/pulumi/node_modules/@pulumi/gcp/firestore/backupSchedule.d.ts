import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A backup schedule for a Cloud Firestore Database.
 * This resource is owned by the database it is backing up, and is deleted along with the database.
 * The actual backups are not though.
 *
 * To get more information about BackupSchedule, see:
 *
 * * [API documentation](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.backupSchedules)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/firestore/docs/backups)
 *
 * > **Warning:** This resource creates a Firestore Backup Schedule on a project that already has
 * a Firestore database.
 * This resource is owned by the database it is backing up, and is deleted along
 * with the database. The actual backups are not though.
 *
 * ## Example Usage
 *
 * ### Firestore Backup Schedule Daily
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.firestore.Database("database", {
 *     project: "my-project-name",
 *     name: "database-id",
 *     locationId: "nam5",
 *     type: "FIRESTORE_NATIVE",
 *     deleteProtectionState: "DELETE_PROTECTION_ENABLED",
 *     deletionPolicy: "DELETE",
 * });
 * const daily_backup = new gcp.firestore.BackupSchedule("daily-backup", {
 *     project: "my-project-name",
 *     database: database.name,
 *     retention: "8467200s",
 *     dailyRecurrence: {},
 * });
 * ```
 * ### Firestore Backup Schedule Weekly
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.firestore.Database("database", {
 *     project: "my-project-name",
 *     name: "database-id",
 *     locationId: "nam5",
 *     type: "FIRESTORE_NATIVE",
 *     deleteProtectionState: "DELETE_PROTECTION_ENABLED",
 *     deletionPolicy: "DELETE",
 * });
 * const weekly_backup = new gcp.firestore.BackupSchedule("weekly-backup", {
 *     project: "my-project-name",
 *     database: database.name,
 *     retention: "8467200s",
 *     weeklyRecurrence: {
 *         day: "SUNDAY",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * BackupSchedule can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/databases/{{database}}/backupSchedules/{{name}}`
 *
 * * `{{project}}/{{database}}/{{name}}`
 *
 * * `{{database}}/{{name}}`
 *
 * When using the `pulumi import` command, BackupSchedule can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:firestore/backupSchedule:BackupSchedule default projects/{{project}}/databases/{{database}}/backupSchedules/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firestore/backupSchedule:BackupSchedule default {{project}}/{{database}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firestore/backupSchedule:BackupSchedule default {{database}}/{{name}}
 * ```
 */
export declare class BackupSchedule extends pulumi.CustomResource {
    /**
     * Get an existing BackupSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupScheduleState, opts?: pulumi.CustomResourceOptions): BackupSchedule;
    /**
     * Returns true if the given object is an instance of BackupSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is BackupSchedule;
    /**
     * For a schedule that runs daily.
     */
    readonly dailyRecurrence: pulumi.Output<outputs.firestore.BackupScheduleDailyRecurrence | undefined>;
    /**
     * The Firestore database id. Defaults to `"(default)"`.
     */
    readonly database: pulumi.Output<string | undefined>;
    /**
     * The unique backup schedule identifier across all locations and databases for the given project. Format:
     * `projects/{{project}}/databases/{{database}}/backupSchedules/{{backupSchedule}}`
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     * You can set this to a value up to 14 weeks.
     *
     *
     * - - -
     */
    readonly retention: pulumi.Output<string>;
    /**
     * For a schedule that runs weekly on a specific day.
     * Structure is documented below.
     */
    readonly weeklyRecurrence: pulumi.Output<outputs.firestore.BackupScheduleWeeklyRecurrence | undefined>;
    /**
     * Create a BackupSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupScheduleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering BackupSchedule resources.
 */
export interface BackupScheduleState {
    /**
     * For a schedule that runs daily.
     */
    dailyRecurrence?: pulumi.Input<inputs.firestore.BackupScheduleDailyRecurrence>;
    /**
     * The Firestore database id. Defaults to `"(default)"`.
     */
    database?: pulumi.Input<string>;
    /**
     * The unique backup schedule identifier across all locations and databases for the given project. Format:
     * `projects/{{project}}/databases/{{database}}/backupSchedules/{{backupSchedule}}`
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     * You can set this to a value up to 14 weeks.
     *
     *
     * - - -
     */
    retention?: pulumi.Input<string>;
    /**
     * For a schedule that runs weekly on a specific day.
     * Structure is documented below.
     */
    weeklyRecurrence?: pulumi.Input<inputs.firestore.BackupScheduleWeeklyRecurrence>;
}
/**
 * The set of arguments for constructing a BackupSchedule resource.
 */
export interface BackupScheduleArgs {
    /**
     * For a schedule that runs daily.
     */
    dailyRecurrence?: pulumi.Input<inputs.firestore.BackupScheduleDailyRecurrence>;
    /**
     * The Firestore database id. Defaults to `"(default)"`.
     */
    database?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     * You can set this to a value up to 14 weeks.
     *
     *
     * - - -
     */
    retention: pulumi.Input<string>;
    /**
     * For a schedule that runs weekly on a specific day.
     * Structure is documented below.
     */
    weeklyRecurrence?: pulumi.Input<inputs.firestore.BackupScheduleWeeklyRecurrence>;
}
