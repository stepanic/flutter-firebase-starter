"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Cloud Firestore Database.
 *
 * If you wish to use Firestore with App Engine, use the
 * `gcp.appengine.Application`
 * resource instead. If you were previously using the `gcp.appengine.Application` resource exclusively for managing a Firestore database
 * and would like to use the `gcp.firestore.Database` resource instead, please follow the instructions
 * [here](https://cloud.google.com/firestore/docs/app-engine-requirement).
 *
 * To get more information about Database, see:
 *
 * * [API documentation](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/firestore/docs/)
 *
 * ## Example Usage
 *
 * ### Firestore Default Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.firestore.Database("database", {
 *     project: "my-project-name",
 *     name: "(default)",
 *     locationId: "nam5",
 *     type: "FIRESTORE_NATIVE",
 * });
 * ```
 * ### Firestore Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.firestore.Database("database", {
 *     project: "my-project-name",
 *     name: "database-id",
 *     locationId: "nam5",
 *     type: "FIRESTORE_NATIVE",
 *     concurrencyMode: "OPTIMISTIC",
 *     appEngineIntegrationMode: "DISABLED",
 *     pointInTimeRecoveryEnablement: "POINT_IN_TIME_RECOVERY_ENABLED",
 *     deleteProtectionState: "DELETE_PROTECTION_ENABLED",
 *     deletionPolicy: "DELETE",
 * });
 * ```
 * ### Firestore Cmek Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const keyRing = new gcp.kms.KeyRing("key_ring", {
 *     name: "kms-key-ring",
 *     location: "us",
 * });
 * const cryptoKey = new gcp.kms.CryptoKey("crypto_key", {
 *     name: "kms-key",
 *     keyRing: keyRing.id,
 *     purpose: "ENCRYPT_DECRYPT",
 * });
 * const firestoreCmekKeyuser = new gcp.kms.CryptoKeyIAMBinding("firestore_cmek_keyuser", {
 *     cryptoKeyId: cryptoKey.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members: [project.then(project => `serviceAccount:service-${project.number}@gcp-sa-firestore.iam.gserviceaccount.com`)],
 * });
 * const database = new gcp.firestore.Database("database", {
 *     project: "my-project-name",
 *     name: "cmek-database-id",
 *     locationId: "nam5",
 *     type: "FIRESTORE_NATIVE",
 *     concurrencyMode: "OPTIMISTIC",
 *     appEngineIntegrationMode: "DISABLED",
 *     pointInTimeRecoveryEnablement: "POINT_IN_TIME_RECOVERY_ENABLED",
 *     deleteProtectionState: "DELETE_PROTECTION_ENABLED",
 *     deletionPolicy: "DELETE",
 *     cmekConfig: {
 *         kmsKeyName: cryptoKey.id,
 *     },
 * }, {
 *     dependsOn: [firestoreCmekKeyuser],
 * });
 * ```
 * ### Firestore Default Database In Datastore Mode
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const datastoreModeDatabase = new gcp.firestore.Database("datastore_mode_database", {
 *     project: "my-project-name",
 *     name: "(default)",
 *     locationId: "nam5",
 *     type: "DATASTORE_MODE",
 * });
 * ```
 * ### Firestore Database In Datastore Mode
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const datastoreModeDatabase = new gcp.firestore.Database("datastore_mode_database", {
 *     project: "my-project-name",
 *     name: "database-id",
 *     locationId: "nam5",
 *     type: "DATASTORE_MODE",
 *     concurrencyMode: "OPTIMISTIC",
 *     appEngineIntegrationMode: "DISABLED",
 *     pointInTimeRecoveryEnablement: "POINT_IN_TIME_RECOVERY_ENABLED",
 *     deleteProtectionState: "DELETE_PROTECTION_ENABLED",
 *     deletionPolicy: "DELETE",
 * });
 * ```
 * ### Firestore Cmek Database In Datastore Mode
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const keyRing = new gcp.kms.KeyRing("key_ring", {
 *     name: "kms-key-ring",
 *     location: "us",
 * });
 * const cryptoKey = new gcp.kms.CryptoKey("crypto_key", {
 *     name: "kms-key",
 *     keyRing: keyRing.id,
 *     purpose: "ENCRYPT_DECRYPT",
 * });
 * const firestoreCmekKeyuser = new gcp.kms.CryptoKeyIAMBinding("firestore_cmek_keyuser", {
 *     cryptoKeyId: cryptoKey.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members: [project.then(project => `serviceAccount:service-${project.number}@gcp-sa-firestore.iam.gserviceaccount.com`)],
 * });
 * const database = new gcp.firestore.Database("database", {
 *     project: "my-project-name",
 *     name: "cmek-database-id",
 *     locationId: "nam5",
 *     type: "DATASTORE_MODE",
 *     concurrencyMode: "OPTIMISTIC",
 *     appEngineIntegrationMode: "DISABLED",
 *     pointInTimeRecoveryEnablement: "POINT_IN_TIME_RECOVERY_ENABLED",
 *     deleteProtectionState: "DELETE_PROTECTION_ENABLED",
 *     deletionPolicy: "DELETE",
 *     cmekConfig: {
 *         kmsKeyName: cryptoKey.id,
 *     },
 * }, {
 *     dependsOn: [firestoreCmekKeyuser],
 * });
 * ```
 *
 * ## Import
 *
 * Database can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/databases/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, Database can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:firestore/database:Database default projects/{{project}}/databases/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firestore/database:Database default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firestore/database:Database default {{name}}
 * ```
 */
class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Database(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appEngineIntegrationMode"] = state ? state.appEngineIntegrationMode : undefined;
            resourceInputs["cmekConfig"] = state ? state.cmekConfig : undefined;
            resourceInputs["concurrencyMode"] = state ? state.concurrencyMode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteProtectionState"] = state ? state.deleteProtectionState : undefined;
            resourceInputs["deletionPolicy"] = state ? state.deletionPolicy : undefined;
            resourceInputs["earliestVersionTime"] = state ? state.earliestVersionTime : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["keyPrefix"] = state ? state.keyPrefix : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pointInTimeRecoveryEnablement"] = state ? state.pointInTimeRecoveryEnablement : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["versionRetentionPeriod"] = state ? state.versionRetentionPeriod : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appEngineIntegrationMode"] = args ? args.appEngineIntegrationMode : undefined;
            resourceInputs["cmekConfig"] = args ? args.cmekConfig : undefined;
            resourceInputs["concurrencyMode"] = args ? args.concurrencyMode : undefined;
            resourceInputs["deleteProtectionState"] = args ? args.deleteProtectionState : undefined;
            resourceInputs["deletionPolicy"] = args ? args.deletionPolicy : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pointInTimeRecoveryEnablement"] = args ? args.pointInTimeRecoveryEnablement : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["earliestVersionTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["keyPrefix"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["versionRetentionPeriod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Database = Database;
/** @internal */
Database.__pulumiType = 'gcp:firestore/database:Database';
//# sourceMappingURL=database.js.map