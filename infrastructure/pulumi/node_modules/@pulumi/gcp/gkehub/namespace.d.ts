import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Namespace represents a namespace across the Fleet.
 *
 * To get more information about Namespace, see:
 *
 * * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes.namespaces)
 * * How-to Guides
 *     * [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
 *
 * ## Example Usage
 *
 * ### Gkehub Namespace Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const scope = new gcp.gkehub.Scope("scope", {scopeId: "tf-test-scope_27169"});
 * const namespace = new gcp.gkehub.Namespace("namespace", {
 *     scopeNamespaceId: "tf-test-namespace_75223",
 *     scopeId: scope.scopeId,
 *     scope: scope.name,
 *     namespaceLabels: {
 *         keyb: "valueb",
 *         keya: "valuea",
 *         keyc: "valuec",
 *     },
 *     labels: {
 *         keyb: "valueb",
 *         keya: "valuea",
 *         keyc: "valuec",
 *     },
 * }, {
 *     dependsOn: [scope],
 * });
 * ```
 *
 * ## Import
 *
 * Namespace can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/scopes/{{scope_id}}/namespaces/{{scope_namespace_id}}`
 *
 * * `{{project}}/{{scope_id}}/{{scope_namespace_id}}`
 *
 * * `{{scope_id}}/{{scope_namespace_id}}`
 *
 * When using the `pulumi import` command, Namespace can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkehub/namespace:Namespace default projects/{{project}}/locations/global/scopes/{{scope_id}}/namespaces/{{scope_namespace_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/namespace:Namespace default {{project}}/{{scope_id}}/{{scope_namespace_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/namespace:Namespace default {{scope_id}}/{{scope_namespace_id}}
 * ```
 */
export declare class Namespace extends pulumi.CustomResource {
    /**
     * Get an existing Namespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceState, opts?: pulumi.CustomResourceOptions): Namespace;
    /**
     * Returns true if the given object is an instance of Namespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Namespace;
    /**
     * Time the Namespace was created in UTC.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * Time the Namespace was deleted in UTC.
     */
    readonly deleteTime: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    readonly effectiveLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Labels for this Namespace.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The resource name for the namespace
     */
    readonly name: pulumi.Output<string>;
    /**
     * Namespace-level cluster namespace labels. These labels are applied
     * to the related namespace of the member clusters bound to the parent
     * Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
     * resource) take precedence over Namespace-level labels if they share
     * a key. Keys and values must be Kubernetes-conformant.
     */
    readonly namespaceLabels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    readonly pulumiLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The name of the Scope instance.
     */
    readonly scope: pulumi.Output<string>;
    /**
     * Id of the scope
     *
     *
     * - - -
     */
    readonly scopeId: pulumi.Output<string>;
    /**
     * The client-provided identifier of the namespace.
     */
    readonly scopeNamespaceId: pulumi.Output<string>;
    /**
     * State of the namespace resource.
     * Structure is documented below.
     */
    readonly states: pulumi.Output<outputs.gkehub.NamespaceState[]>;
    /**
     * Google-generated UUID for this resource.
     */
    readonly uid: pulumi.Output<string>;
    /**
     * Time the Namespace was updated in UTC.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a Namespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Namespace resources.
 */
export interface NamespaceState {
    /**
     * Time the Namespace was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Time the Namespace was deleted in UTC.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Labels for this Namespace.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The resource name for the namespace
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace-level cluster namespace labels. These labels are applied
     * to the related namespace of the member clusters bound to the parent
     * Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
     * resource) take precedence over Namespace-level labels if they share
     * a key. Keys and values must be Kubernetes-conformant.
     */
    namespaceLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of the Scope instance.
     */
    scope?: pulumi.Input<string>;
    /**
     * Id of the scope
     *
     *
     * - - -
     */
    scopeId?: pulumi.Input<string>;
    /**
     * The client-provided identifier of the namespace.
     */
    scopeNamespaceId?: pulumi.Input<string>;
    /**
     * State of the namespace resource.
     * Structure is documented below.
     */
    states?: pulumi.Input<pulumi.Input<inputs.gkehub.NamespaceState>[]>;
    /**
     * Google-generated UUID for this resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time the Namespace was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Namespace resource.
 */
export interface NamespaceArgs {
    /**
     * Labels for this Namespace.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Namespace-level cluster namespace labels. These labels are applied
     * to the related namespace of the member clusters bound to the parent
     * Scope. Scope-level labels (`namespaceLabels` in the Fleet Scope
     * resource) take precedence over Namespace-level labels if they share
     * a key. Keys and values must be Kubernetes-conformant.
     */
    namespaceLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the Scope instance.
     */
    scope: pulumi.Input<string>;
    /**
     * Id of the scope
     *
     *
     * - - -
     */
    scopeId: pulumi.Input<string>;
    /**
     * The client-provided identifier of the namespace.
     */
    scopeNamespaceId: pulumi.Input<string>;
}
