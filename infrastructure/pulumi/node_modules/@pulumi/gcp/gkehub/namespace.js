"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespace = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Namespace represents a namespace across the Fleet.
 *
 * To get more information about Namespace, see:
 *
 * * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes.namespaces)
 * * How-to Guides
 *     * [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
 *
 * ## Example Usage
 *
 * ### Gkehub Namespace Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const scope = new gcp.gkehub.Scope("scope", {scopeId: "tf-test-scope_27169"});
 * const namespace = new gcp.gkehub.Namespace("namespace", {
 *     scopeNamespaceId: "tf-test-namespace_75223",
 *     scopeId: scope.scopeId,
 *     scope: scope.name,
 *     namespaceLabels: {
 *         keyb: "valueb",
 *         keya: "valuea",
 *         keyc: "valuec",
 *     },
 *     labels: {
 *         keyb: "valueb",
 *         keya: "valuea",
 *         keyc: "valuec",
 *     },
 * }, {
 *     dependsOn: [scope],
 * });
 * ```
 *
 * ## Import
 *
 * Namespace can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/scopes/{{scope_id}}/namespaces/{{scope_namespace_id}}`
 *
 * * `{{project}}/{{scope_id}}/{{scope_namespace_id}}`
 *
 * * `{{scope_id}}/{{scope_namespace_id}}`
 *
 * When using the `pulumi import` command, Namespace can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkehub/namespace:Namespace default projects/{{project}}/locations/global/scopes/{{scope_id}}/namespaces/{{scope_namespace_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/namespace:Namespace default {{project}}/{{scope_id}}/{{scope_namespace_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/namespace:Namespace default {{scope_id}}/{{scope_namespace_id}}
 * ```
 */
class Namespace extends pulumi.CustomResource {
    /**
     * Get an existing Namespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Namespace(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Namespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Namespace.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceLabels"] = state ? state.namespaceLabels : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
            resourceInputs["scopeNamespaceId"] = state ? state.scopeNamespaceId : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.scopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeId'");
            }
            if ((!args || args.scopeNamespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeNamespaceId'");
            }
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["namespaceLabels"] = args ? args.namespaceLabels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
            resourceInputs["scopeNamespaceId"] = args ? args.scopeNamespaceId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Namespace.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Namespace = Namespace;
/** @internal */
Namespace.__pulumiType = 'gcp:gkehub/namespace:Namespace';
//# sourceMappingURL=namespace.js.map