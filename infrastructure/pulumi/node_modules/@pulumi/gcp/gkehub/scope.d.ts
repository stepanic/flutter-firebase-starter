import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Scope represents a Scope in a Fleet.
 *
 * To get more information about Scope, see:
 *
 * * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes)
 * * How-to Guides
 *     * [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
 *
 * ## Example Usage
 *
 * ### Gkehub Scope Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const scope = new gcp.gkehub.Scope("scope", {
 *     scopeId: "my-scope",
 *     namespaceLabels: {
 *         keyb: "valueb",
 *         keya: "valuea",
 *         keyc: "valuec",
 *     },
 *     labels: {
 *         keyb: "valueb",
 *         keya: "valuea",
 *         keyc: "valuec",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Scope can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/scopes/{{scope_id}}`
 *
 * * `{{project}}/{{scope_id}}`
 *
 * * `{{scope_id}}`
 *
 * When using the `pulumi import` command, Scope can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scope:Scope default projects/{{project}}/locations/global/scopes/{{scope_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scope:Scope default {{project}}/{{scope_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scope:Scope default {{scope_id}}
 * ```
 */
export declare class Scope extends pulumi.CustomResource {
    /**
     * Get an existing Scope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScopeState, opts?: pulumi.CustomResourceOptions): Scope;
    /**
     * Returns true if the given object is an instance of Scope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Scope;
    /**
     * Time the Scope was created in UTC.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * Time the Scope was deleted in UTC.
     */
    readonly deleteTime: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    readonly effectiveLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Labels for this Scope.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The unique identifier of the scope
     */
    readonly name: pulumi.Output<string>;
    /**
     * Scope-level cluster namespace labels. For the member clusters bound
     * to the Scope, these labels are applied to each namespace under the
     * Scope. Scope-level labels take precedence over Namespace-level
     * labels (`namespaceLabels` in the Fleet Namespace resource) if they
     * share a key. Keys and values must be Kubernetes-conformant.
     */
    readonly namespaceLabels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    readonly pulumiLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The client-provided identifier of the scope.
     *
     *
     * - - -
     */
    readonly scopeId: pulumi.Output<string>;
    /**
     * State of the scope resource.
     * Structure is documented below.
     */
    readonly states: pulumi.Output<outputs.gkehub.ScopeState[]>;
    /**
     * Google-generated UUID for this resource.
     */
    readonly uid: pulumi.Output<string>;
    /**
     * Time the Scope was updated in UTC.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a Scope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScopeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Scope resources.
 */
export interface ScopeState {
    /**
     * Time the Scope was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Time the Scope was deleted in UTC.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Labels for this Scope.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The unique identifier of the scope
     */
    name?: pulumi.Input<string>;
    /**
     * Scope-level cluster namespace labels. For the member clusters bound
     * to the Scope, these labels are applied to each namespace under the
     * Scope. Scope-level labels take precedence over Namespace-level
     * labels (`namespaceLabels` in the Fleet Namespace resource) if they
     * share a key. Keys and values must be Kubernetes-conformant.
     */
    namespaceLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The client-provided identifier of the scope.
     *
     *
     * - - -
     */
    scopeId?: pulumi.Input<string>;
    /**
     * State of the scope resource.
     * Structure is documented below.
     */
    states?: pulumi.Input<pulumi.Input<inputs.gkehub.ScopeState>[]>;
    /**
     * Google-generated UUID for this resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time the Scope was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Scope resource.
 */
export interface ScopeArgs {
    /**
     * Labels for this Scope.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Scope-level cluster namespace labels. For the member clusters bound
     * to the Scope, these labels are applied to each namespace under the
     * Scope. Scope-level labels take precedence over Namespace-level
     * labels (`namespaceLabels` in the Fleet Namespace resource) if they
     * share a key. Keys and values must be Kubernetes-conformant.
     */
    namespaceLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The client-provided identifier of the scope.
     *
     *
     * - - -
     */
    scopeId: pulumi.Input<string>;
}
