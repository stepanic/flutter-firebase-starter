"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScopeRbacRoleBinding = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * RBACRoleBinding represents a rbacrolebinding across the Fleet.
 *
 * To get more information about ScopeRBACRoleBinding, see:
 *
 * * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes.rbacrolebindings)
 * * How-to Guides
 *     * [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
 *
 * ## Example Usage
 *
 * ### Gkehub Scope Rbac Role Binding Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const scope = new gcp.gkehub.Scope("scope", {scopeId: "tf-test-scope_41819"});
 * const scopeRbacRoleBinding = new gcp.gkehub.ScopeRbacRoleBinding("scope_rbac_role_binding", {
 *     scopeRbacRoleBindingId: "tf-test-scope-rbac-role-binding_75092",
 *     scopeId: scope.scopeId,
 *     user: "test-email@gmail.com",
 *     role: {
 *         predefinedRole: "ADMIN",
 *     },
 *     labels: {
 *         key: "value",
 *     },
 * }, {
 *     dependsOn: [scope],
 * });
 * ```
 *
 * ## Import
 *
 * ScopeRBACRoleBinding can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/scopes/{{scope_id}}/rbacrolebindings/{{scope_rbac_role_binding_id}}`
 *
 * * `{{project}}/{{scope_id}}/{{scope_rbac_role_binding_id}}`
 *
 * * `{{scope_id}}/{{scope_rbac_role_binding_id}}`
 *
 * When using the `pulumi import` command, ScopeRBACRoleBinding can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default projects/{{project}}/locations/global/scopes/{{scope_id}}/rbacrolebindings/{{scope_rbac_role_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{project}}/{{scope_id}}/{{scope_rbac_role_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{scope_id}}/{{scope_rbac_role_binding_id}}
 * ```
 */
class ScopeRbacRoleBinding extends pulumi.CustomResource {
    /**
     * Get an existing ScopeRbacRoleBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ScopeRbacRoleBinding(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ScopeRbacRoleBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScopeRbacRoleBinding.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
            resourceInputs["scopeRbacRoleBindingId"] = state ? state.scopeRbacRoleBindingId : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.scopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeId'");
            }
            if ((!args || args.scopeRbacRoleBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeRbacRoleBindingId'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
            resourceInputs["scopeRbacRoleBindingId"] = args ? args.scopeRbacRoleBindingId : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ScopeRbacRoleBinding.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ScopeRbacRoleBinding = ScopeRbacRoleBinding;
/** @internal */
ScopeRbacRoleBinding.__pulumiType = 'gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding';
//# sourceMappingURL=scopeRbacRoleBinding.js.map