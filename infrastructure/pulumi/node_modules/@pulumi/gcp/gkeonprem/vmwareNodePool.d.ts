import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A Google Vmware Node Pool.
 *
 * ## Example Usage
 *
 * ### Gkeonprem Vmware Node Pool Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default_basic = new gcp.gkeonprem.VMwareCluster("default-basic", {
 *     name: "my-cluster",
 *     location: "us-west1",
 *     adminClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     description: "test cluster",
 *     onPremVersion: "1.13.1-gke.35",
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         dhcpIpConfig: {
 *             enabled: true,
 *         },
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *         replicas: 1,
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             ingressVip: "10.251.135.19",
 *         },
 *         metalLbConfig: {
 *             addressPools: [
 *                 {
 *                     pool: "ingress-ip",
 *                     manualAssign: true,
 *                     addresses: ["10.251.135.19"],
 *                 },
 *                 {
 *                     pool: "lb-test-ip",
 *                     manualAssign: true,
 *                     addresses: ["10.251.135.19"],
 *                 },
 *             ],
 *         },
 *     },
 * });
 * const nodepool_basic = new gcp.gkeonprem.VMwareNodePool("nodepool-basic", {
 *     name: "my-nodepool",
 *     location: "us-west1",
 *     vmwareCluster: default_basic.name,
 *     config: {
 *         replicas: 3,
 *         imageType: "ubuntu_containerd",
 *         enableLoadBalancer: true,
 *     },
 * });
 * ```
 * ## Import
 *
 * VmwareNodePool can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/vmwareClusters/{{vmware_cluster}}/vmwareNodePools/{{name}}`
 *
 * * `{{project}}/{{location}}/{{vmware_cluster}}/{{name}}`
 *
 * * `{{location}}/{{vmware_cluster}}/{{name}}`
 *
 * When using the `pulumi import` command, VmwareNodePool can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default projects/{{project}}/locations/{{location}}/vmwareClusters/{{vmware_cluster}}/vmwareNodePools/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default {{project}}/{{location}}/{{vmware_cluster}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default {{location}}/{{vmware_cluster}}/{{name}}
 * ```
 */
export declare class VMwareNodePool extends pulumi.CustomResource {
    /**
     * Get an existing VMwareNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VMwareNodePoolState, opts?: pulumi.CustomResourceOptions): VMwareNodePool;
    /**
     * Returns true if the given object is an instance of VMwareNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VMwareNodePool;
    /**
     * Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
     * and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
     * slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
     * dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
     * only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
     * the annotations present on the resource.
     */
    readonly annotations: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The node configuration of the node pool.
     * Structure is documented below.
     */
    readonly config: pulumi.Output<outputs.gkeonprem.VMwareNodePoolConfig>;
    /**
     * The time the cluster was created, in RFC3339 text format.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * The time the cluster was deleted, in RFC3339 text format.
     */
    readonly deleteTime: pulumi.Output<string>;
    /**
     * The display name for the node pool.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    readonly effectiveAnnotations: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * The location of the resource.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The vmware node pool name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Node Pool autoscaling config for the node pool.
     */
    readonly nodePoolAutoscaling: pulumi.Output<outputs.gkeonprem.VMwareNodePoolNodePoolAutoscaling | undefined>;
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     */
    readonly onPremVersion: pulumi.Output<string>;
    readonly project: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the node pool.
     */
    readonly reconciling: pulumi.Output<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    readonly state: pulumi.Output<string>;
    /**
     * ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     */
    readonly statuses: pulumi.Output<outputs.gkeonprem.VMwareNodePoolStatus[]>;
    /**
     * The unique identifier of the node pool.
     */
    readonly uid: pulumi.Output<string>;
    /**
     * The time the cluster was last updated, in RFC3339 text format.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * The cluster this node pool belongs to.
     */
    readonly vmwareCluster: pulumi.Output<string>;
    /**
     * Create a VMwareNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VMwareNodePoolArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering VMwareNodePool resources.
 */
export interface VMwareNodePoolState {
    /**
     * Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
     * and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
     * slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
     * dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
     * only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
     * the annotations present on the resource.
     */
    annotations?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The node configuration of the node pool.
     * Structure is documented below.
     */
    config?: pulumi.Input<inputs.gkeonprem.VMwareNodePoolConfig>;
    /**
     * The time the cluster was created, in RFC3339 text format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The time the cluster was deleted, in RFC3339 text format.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * The display name for the node pool.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    etag?: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The vmware node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Node Pool autoscaling config for the node pool.
     */
    nodePoolAutoscaling?: pulumi.Input<inputs.gkeonprem.VMwareNodePoolNodePoolAutoscaling>;
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     */
    onPremVersion?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * If set, there are currently changes in flight to the node pool.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    state?: pulumi.Input<string>;
    /**
     * ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareNodePoolStatus>[]>;
    /**
     * The unique identifier of the node pool.
     */
    uid?: pulumi.Input<string>;
    /**
     * The time the cluster was last updated, in RFC3339 text format.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The cluster this node pool belongs to.
     */
    vmwareCluster?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a VMwareNodePool resource.
 */
export interface VMwareNodePoolArgs {
    /**
     * Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
     * and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
     * slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
     * dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
     * only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
     * the annotations present on the resource.
     */
    annotations?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The node configuration of the node pool.
     * Structure is documented below.
     */
    config: pulumi.Input<inputs.gkeonprem.VMwareNodePoolConfig>;
    /**
     * The display name for the node pool.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location: pulumi.Input<string>;
    /**
     * The vmware node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Node Pool autoscaling config for the node pool.
     */
    nodePoolAutoscaling?: pulumi.Input<inputs.gkeonprem.VMwareNodePoolNodePoolAutoscaling>;
    project?: pulumi.Input<string>;
    /**
     * The cluster this node pool belongs to.
     */
    vmwareCluster: pulumi.Input<string>;
}
