"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hl7Store = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Hl7V2Store is a datastore inside a Healthcare dataset that conforms to the FHIR (https://www.hl7.org/hl7V2/STU3/)
 * standard for Healthcare information exchange
 *
 * To get more information about Hl7V2Store, see:
 *
 * * [API documentation](https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets.hl7V2Stores)
 * * How-to Guides
 *     * [Creating a HL7v2 Store](https://cloud.google.com/healthcare/docs/how-tos/hl7v2)
 *
 * ## Example Usage
 *
 * ### Healthcare Hl7 V2 Store Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const topic = new gcp.pubsub.Topic("topic", {name: "hl7-v2-notifications"});
 * const dataset = new gcp.healthcare.Dataset("dataset", {
 *     name: "example-dataset",
 *     location: "us-central1",
 * });
 * const store = new gcp.healthcare.Hl7Store("store", {
 *     name: "example-hl7-v2-store",
 *     dataset: dataset.id,
 *     rejectDuplicateMessage: true,
 *     notificationConfigs: [{
 *         pubsubTopic: topic.id,
 *     }],
 *     labels: {
 *         label1: "labelvalue1",
 *     },
 * });
 * ```
 * ### Healthcare Hl7 V2 Store Parser Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dataset = new gcp.healthcare.Dataset("dataset", {
 *     name: "example-dataset",
 *     location: "us-central1",
 * });
 * const store = new gcp.healthcare.Hl7Store("store", {
 *     name: "example-hl7-v2-store",
 *     dataset: dataset.id,
 *     parserConfig: {
 *         allowNullHeader: false,
 *         segmentTerminator: "Jw==",
 *         schema: `{
 *   "schemas": [{
 *     "messageSchemaConfigs": {
 *       "ADT_A01": {
 *         "name": "ADT_A01",
 *         "minOccurs": 1,
 *         "maxOccurs": 1,
 *         "members": [{
 *             "segment": {
 *               "type": "MSH",
 *               "minOccurs": 1,
 *               "maxOccurs": 1
 *             }
 *           },
 *           {
 *             "segment": {
 *               "type": "EVN",
 *               "minOccurs": 1,
 *               "maxOccurs": 1
 *             }
 *           },
 *           {
 *             "segment": {
 *               "type": "PID",
 *               "minOccurs": 1,
 *               "maxOccurs": 1
 *             }
 *           },
 *           {
 *             "segment": {
 *               "type": "ZPD",
 *               "minOccurs": 1,
 *               "maxOccurs": 1
 *             }
 *           },
 *           {
 *             "segment": {
 *               "type": "OBX"
 *             }
 *           },
 *           {
 *             "group": {
 *               "name": "PROCEDURE",
 *               "members": [{
 *                   "segment": {
 *                     "type": "PR1",
 *                     "minOccurs": 1,
 *                     "maxOccurs": 1
 *                   }
 *                 },
 *                 {
 *                   "segment": {
 *                     "type": "ROL"
 *                   }
 *                 }
 *               ]
 *             }
 *           },
 *           {
 *             "segment": {
 *               "type": "PDA",
 *               "maxOccurs": 1
 *             }
 *           }
 *         ]
 *       }
 *     }
 *   }],
 *   "types": [{
 *     "type": [{
 *         "name": "ZPD",
 *         "primitive": "VARIES"
 *       }
 *
 *     ]
 *   }],
 *   "ignoreMinOccurs": true
 * }
 * `,
 *     },
 * });
 * ```
 * ### Healthcare Hl7 V2 Store Unschematized
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dataset = new gcp.healthcare.Dataset("dataset", {
 *     name: "example-dataset",
 *     location: "us-central1",
 * });
 * const store = new gcp.healthcare.Hl7Store("store", {
 *     name: "example-hl7-v2-store",
 *     dataset: dataset.id,
 *     parserConfig: {
 *         allowNullHeader: false,
 *         segmentTerminator: "Jw==",
 *         version: "V2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Hl7V2Store can be imported using any of these accepted formats:
 *
 * * `{{dataset}}/hl7V2Stores/{{name}}`
 *
 * * `{{dataset}}/{{name}}`
 *
 * When using the `pulumi import` command, Hl7V2Store can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:healthcare/hl7Store:Hl7Store default {{dataset}}/hl7V2Stores/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:healthcare/hl7Store:Hl7Store default {{dataset}}/{{name}}
 * ```
 */
class Hl7Store extends pulumi.CustomResource {
    /**
     * Get an existing Hl7Store resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Hl7Store(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Hl7Store.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hl7Store.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationConfig"] = state ? state.notificationConfig : undefined;
            resourceInputs["notificationConfigs"] = state ? state.notificationConfigs : undefined;
            resourceInputs["parserConfig"] = state ? state.parserConfig : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["rejectDuplicateMessage"] = state ? state.rejectDuplicateMessage : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationConfig"] = args ? args.notificationConfig : undefined;
            resourceInputs["notificationConfigs"] = args ? args.notificationConfigs : undefined;
            resourceInputs["parserConfig"] = args ? args.parserConfig : undefined;
            resourceInputs["rejectDuplicateMessage"] = args ? args.rejectDuplicateMessage : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Hl7Store.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Hl7Store = Hl7Store;
/** @internal */
Hl7Store.__pulumiType = 'gcp:healthcare/hl7Store:Hl7Store';
//# sourceMappingURL=hl7Store.js.map