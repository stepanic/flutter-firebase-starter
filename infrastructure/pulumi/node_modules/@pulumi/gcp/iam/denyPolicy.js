"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DenyPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a collection of denial policies to apply to a given resource.
 *
 * To get more information about DenyPolicy, see:
 *
 * * [API documentation](https://cloud.google.com/iam/docs/reference/rest/v2/policies)
 * * How-to Guides
 *     * [Permissions supported in deny policies](https://cloud.google.com/iam/docs/deny-permissions-support)
 *
 * ## Example Usage
 *
 * ### Iam Deny Policy Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 *
 * const project = new gcp.organizations.Project("project", {
 *     projectId: "my-project",
 *     name: "my-project",
 *     orgId: "123456789",
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * const test_account = new gcp.serviceaccount.Account("test-account", {
 *     accountId: "svc-acc",
 *     displayName: "Test Service Account",
 *     project: project.projectId,
 * });
 * const example = new gcp.iam.DenyPolicy("example", {
 *     parent: std.urlencodeOutput({
 *         input: pulumi.interpolate`cloudresourcemanager.googleapis.com/projects/${project.projectId}`,
 *     }).apply(invoke => invoke.result),
 *     name: "my-deny-policy",
 *     displayName: "A deny rule",
 *     rules: [
 *         {
 *             description: "First rule",
 *             denyRule: {
 *                 deniedPrincipals: ["principalSet://goog/public:all"],
 *                 denialCondition: {
 *                     title: "Some expr",
 *                     expression: "!resource.matchTag('12345678/env', 'test')",
 *                 },
 *                 deniedPermissions: ["cloudresourcemanager.googleapis.com/projects.update"],
 *             },
 *         },
 *         {
 *             description: "Second rule",
 *             denyRule: {
 *                 deniedPrincipals: ["principalSet://goog/public:all"],
 *                 denialCondition: {
 *                     title: "Some expr",
 *                     expression: "!resource.matchTag('12345678/env', 'test')",
 *                 },
 *                 deniedPermissions: ["cloudresourcemanager.googleapis.com/projects.update"],
 *                 exceptionPrincipals: [pulumi.interpolate`principal://iam.googleapis.com/projects/-/serviceAccounts/${test_account.email}`],
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * DenyPolicy can be imported using any of these accepted formats:
 *
 * * `{{parent}}/{{name}}`
 *
 * When using the `pulumi import` command, DenyPolicy can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:iam/denyPolicy:DenyPolicy default {{parent}}/{{name}}
 * ```
 */
class DenyPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DenyPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DenyPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DenyPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DenyPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DenyPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DenyPolicy = DenyPolicy;
/** @internal */
DenyPolicy.__pulumiType = 'gcp:iam/denyPolicy:DenyPolicy';
//# sourceMappingURL=denyPolicy.js.map