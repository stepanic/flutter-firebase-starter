import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ### Kms Autokey Config All
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumi/time";
 *
 * // Create Folder in GCP Organization
 * const autokmsFolder = new gcp.organizations.Folder("autokms_folder", {
 *     displayName: "my-folder",
 *     parent: "organizations/123456789",
 * });
 * // Create the key project
 * const keyProject = new gcp.organizations.Project("key_project", {
 *     projectId: "key-proj",
 *     name: "key-proj",
 *     folderId: autokmsFolder.folderId,
 *     billingAccount: "000000-0000000-0000000-000000",
 * }, {
 *     dependsOn: [autokmsFolder],
 * });
 * // Enable the Cloud KMS API
 * const kmsApiService = new gcp.projects.Service("kms_api_service", {
 *     service: "cloudkms.googleapis.com",
 *     project: keyProject.projectId,
 *     disableOnDestroy: false,
 *     disableDependentServices: true,
 * }, {
 *     dependsOn: [keyProject],
 * });
 * // Wait delay after enabling APIs
 * const waitEnableServiceApi = new time.index.Sleep("wait_enable_service_api", {createDuration: "30s"}, {
 *     dependsOn: [kmsApiService],
 * });
 * //Create KMS Service Agent
 * const kmsServiceAgent = new gcp.projects.ServiceIdentity("kms_service_agent", {
 *     service: "cloudkms.googleapis.com",
 *     project: keyProject.number,
 * }, {
 *     dependsOn: [waitEnableServiceApi],
 * });
 * // Wait delay after creating service agent.
 * const waitServiceAgent = new time.index.Sleep("wait_service_agent", {createDuration: "10s"}, {
 *     dependsOn: [kmsServiceAgent],
 * });
 * //Grant the KMS Service Agent the Cloud KMS Admin role
 * const autokeyProjectAdmin = new gcp.projects.IAMMember("autokey_project_admin", {
 *     project: keyProject.projectId,
 *     role: "roles/cloudkms.admin",
 *     member: pulumi.interpolate`serviceAccount:service-${keyProject.number}@gcp-sa-cloudkms.iam.gserviceaccount.com`,
 * }, {
 *     dependsOn: [waitServiceAgent],
 * });
 * // Wait delay after granting IAM permissions
 * const waitSrvAccPermissions = new time.index.Sleep("wait_srv_acc_permissions", {createDuration: "10s"}, {
 *     dependsOn: [autokeyProjectAdmin],
 * });
 * const example_autokeyconfig = new gcp.kms.AutokeyConfig("example-autokeyconfig", {
 *     folder: autokmsFolder.folderId,
 *     keyProject: pulumi.interpolate`projects/${keyProject.projectId}`,
 * }, {
 *     dependsOn: [waitSrvAccPermissions],
 * });
 * ```
 *
 * ## Import
 *
 * AutokeyConfig can be imported using any of these accepted formats:
 *
 * * `folders/{{folder}}/autokeyConfig`
 *
 * * `{{folder}}`
 *
 * When using the `pulumi import` command, AutokeyConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:kms/autokeyConfig:AutokeyConfig default folders/{{folder}}/autokeyConfig
 * ```
 *
 * ```sh
 * $ pulumi import gcp:kms/autokeyConfig:AutokeyConfig default {{folder}}
 * ```
 */
export declare class AutokeyConfig extends pulumi.CustomResource {
    /**
     * Get an existing AutokeyConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutokeyConfigState, opts?: pulumi.CustomResourceOptions): AutokeyConfig;
    /**
     * Returns true if the given object is an instance of AutokeyConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AutokeyConfig;
    /**
     * The folder for which to retrieve config.
     *
     *
     * - - -
     */
    readonly folder: pulumi.Output<string>;
    /**
     * The target key project for a given folder where KMS Autokey will provision a
     * CryptoKey for any new KeyHandle the Developer creates. Should have the form
     * `projects/<project_id_or_number>`.
     */
    readonly keyProject: pulumi.Output<string | undefined>;
    /**
     * Create a AutokeyConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutokeyConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AutokeyConfig resources.
 */
export interface AutokeyConfigState {
    /**
     * The folder for which to retrieve config.
     *
     *
     * - - -
     */
    folder?: pulumi.Input<string>;
    /**
     * The target key project for a given folder where KMS Autokey will provision a
     * CryptoKey for any new KeyHandle the Developer creates. Should have the form
     * `projects/<project_id_or_number>`.
     */
    keyProject?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AutokeyConfig resource.
 */
export interface AutokeyConfigArgs {
    /**
     * The folder for which to retrieve config.
     *
     *
     * - - -
     */
    folder: pulumi.Input<string>;
    /**
     * The target key project for a given folder where KMS Autokey will provision a
     * CryptoKey for any new KeyHandle the Developer creates. Should have the form
     * `projects/<project_id_or_number>`.
     */
    keyProject?: pulumi.Input<string>;
}
