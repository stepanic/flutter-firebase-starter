"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Default resource settings control whether CMEK is required for new log buckets. These settings also determine the storage location for the _Default and _Required log buckets, and whether the _Default sink is enabled or disabled.
 *
 * To get more information about OrganizationSettings, see:
 *
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/TopLevel/getSettings)
 * * How-to Guides
 *     * [Configure default settings for organizations and folders](https://cloud.google.com/logging/docs/default-settings)
 *
 * ## Example Usage
 *
 * ### Logging Organization Settings All
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const settings = gcp.logging.getOrganizationSettings({
 *     organization: "123456789",
 * });
 * const iam = new gcp.kms.CryptoKeyIAMMember("iam", {
 *     cryptoKeyId: "kms-key",
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     member: settings.then(settings => `serviceAccount:${settings.kmsServiceAccountId}`),
 * });
 * const example = new gcp.logging.OrganizationSettings("example", {
 *     disableDefaultSink: true,
 *     kmsKeyName: "kms-key",
 *     organization: "123456789",
 *     storageLocation: "us-central1",
 * }, {
 *     dependsOn: [iam],
 * });
 * ```
 *
 * ## Import
 *
 * OrganizationSettings can be imported using any of these accepted formats:
 *
 * * `organizations/{{organization}}/settings`
 *
 * * `{{organization}}`
 *
 * When using the `pulumi import` command, OrganizationSettings can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:logging/organizationSettings:OrganizationSettings default organizations/{{organization}}/settings
 * ```
 *
 * ```sh
 * $ pulumi import gcp:logging/organizationSettings:OrganizationSettings default {{organization}}
 * ```
 */
class OrganizationSettings extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OrganizationSettings(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OrganizationSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationSettings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["disableDefaultSink"] = state ? state.disableDefaultSink : undefined;
            resourceInputs["kmsKeyName"] = state ? state.kmsKeyName : undefined;
            resourceInputs["kmsServiceAccountId"] = state ? state.kmsServiceAccountId : undefined;
            resourceInputs["loggingServiceAccountId"] = state ? state.loggingServiceAccountId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["storageLocation"] = state ? state.storageLocation : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            resourceInputs["disableDefaultSink"] = args ? args.disableDefaultSink : undefined;
            resourceInputs["kmsKeyName"] = args ? args.kmsKeyName : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["storageLocation"] = args ? args.storageLocation : undefined;
            resourceInputs["kmsServiceAccountId"] = undefined /*out*/;
            resourceInputs["loggingServiceAccountId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationSettings.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OrganizationSettings = OrganizationSettings;
/** @internal */
OrganizationSettings.__pulumiType = 'gcp:logging/organizationSettings:OrganizationSettings';
//# sourceMappingURL=organizationSettings.js.map