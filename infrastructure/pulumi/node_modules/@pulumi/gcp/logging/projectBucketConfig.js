"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectBucketConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a project-level logging bucket config. For more information see
 * [the official logging documentation](https://cloud.google.com/logging/docs/) and
 * [Storing Logs](https://cloud.google.com/logging/docs/storage).
 *
 * > **Note:** Logging buckets are automatically created for a given folder, project, organization, billingAccount and cannot be deleted. Creating a resource of this type will acquire and update the resource that already exists at the desired location. These buckets cannot be removed so deleting this resource will remove the bucket config from your state but will leave the logging bucket unchanged. The buckets that are currently automatically created are "_Default" and "_Required".
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.organizations.Project("default", {
 *     projectId: "your-project-id",
 *     name: "your-project-id",
 *     orgId: "123456789",
 * });
 * const basic = new gcp.logging.ProjectBucketConfig("basic", {
 *     project: _default.projectId,
 *     location: "global",
 *     retentionDays: 30,
 *     bucketId: "_Default",
 * });
 * ```
 *
 * Create logging bucket with customId
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.logging.ProjectBucketConfig("basic", {
 *     project: "project_id",
 *     location: "global",
 *     retentionDays: 30,
 *     bucketId: "custom-bucket",
 * });
 * ```
 *
 * Create logging bucket with Log Analytics enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const analytics_enabled_bucket = new gcp.logging.ProjectBucketConfig("analytics-enabled-bucket", {
 *     project: "project_id",
 *     location: "global",
 *     retentionDays: 30,
 *     enableAnalytics: true,
 *     bucketId: "custom-bucket",
 * });
 * ```
 *
 * Create logging bucket with customId and cmekSettings
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cmekSettings = gcp.logging.getProjectCmekSettings({
 *     project: "project_id",
 * });
 * const keyring = new gcp.kms.KeyRing("keyring", {
 *     name: "keyring-example",
 *     location: "us-central1",
 * });
 * const key = new gcp.kms.CryptoKey("key", {
 *     name: "crypto-key-example",
 *     keyRing: keyring.id,
 *     rotationPeriod: "7776000s",
 * });
 * const cryptoKeyBinding = new gcp.kms.CryptoKeyIAMBinding("crypto_key_binding", {
 *     cryptoKeyId: key.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members: [cmekSettings.then(cmekSettings => `serviceAccount:${cmekSettings.serviceAccountId}`)],
 * });
 * const example_project_bucket_cmek_settings = new gcp.logging.ProjectBucketConfig("example-project-bucket-cmek-settings", {
 *     project: "project_id",
 *     location: "us-central1",
 *     retentionDays: 30,
 *     bucketId: "custom-bucket",
 *     cmekSettings: {
 *         kmsKeyName: key.id,
 *     },
 * }, {
 *     dependsOn: [cryptoKeyBinding],
 * });
 * ```
 *
 * Create logging bucket with index configs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example_project_bucket_index_configs = new gcp.logging.ProjectBucketConfig("example-project-bucket-index-configs", {
 *     project: "project_id",
 *     location: "global",
 *     retentionDays: 30,
 *     bucketId: "custom-bucket",
 *     indexConfigs: [{
 *         fieldPath: "jsonPayload.request.status",
 *         type: "INDEX_TYPE_STRING",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using the following format:
 *
 * * `projects/{{project}}/locations/{{location}}/buckets/{{bucket_id}}`
 *
 * When using the `pulumi import` command, this resource can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:logging/projectBucketConfig:ProjectBucketConfig default projects/{{project}}/locations/{{location}}/buckets/{{bucket_id}}
 * ```
 */
class ProjectBucketConfig extends pulumi.CustomResource {
    /**
     * Get an existing ProjectBucketConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectBucketConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectBucketConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectBucketConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["cmekSettings"] = state ? state.cmekSettings : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableAnalytics"] = state ? state.enableAnalytics : undefined;
            resourceInputs["indexConfigs"] = state ? state.indexConfigs : undefined;
            resourceInputs["lifecycleState"] = state ? state.lifecycleState : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["retentionDays"] = state ? state.retentionDays : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bucketId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["cmekSettings"] = args ? args.cmekSettings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableAnalytics"] = args ? args.enableAnalytics : undefined;
            resourceInputs["indexConfigs"] = args ? args.indexConfigs : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["retentionDays"] = args ? args.retentionDays : undefined;
            resourceInputs["lifecycleState"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectBucketConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProjectBucketConfig = ProjectBucketConfig;
/** @internal */
ProjectBucketConfig.__pulumiType = 'gcp:logging/projectBucketConfig:ProjectBucketConfig';
//# sourceMappingURL=projectBucketConfig.js.map