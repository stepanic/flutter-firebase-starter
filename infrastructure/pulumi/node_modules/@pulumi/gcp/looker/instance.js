"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Google Cloud Looker instance.
 *
 * To get more information about Instance, see:
 *
 * * [API documentation](https://cloud.google.com/looker/docs/reference/rest/v1/projects.locations.instances)
 * * How-to Guides
 *     * [Configure a Looker (Google Cloud core) instance](https://cloud.google.com/looker/docs/looker-core-instance-setup)
 *     * [Create a Looker (Google Cloud core) instance](https://cloud.google.com/looker/docs/looker-core-instance-create)
 *
 * ## Example Usage
 *
 * ### Looker Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const looker_instance = new gcp.looker.Instance("looker-instance", {
 *     name: "my-instance",
 *     platformEdition: "LOOKER_CORE_STANDARD_ANNUAL",
 *     region: "us-central1",
 *     oauthConfig: {
 *         clientId: "my-client-id",
 *         clientSecret: "my-client-secret",
 *     },
 * });
 * ```
 * ### Looker Instance Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const looker_instance = new gcp.looker.Instance("looker-instance", {
 *     name: "my-instance",
 *     platformEdition: "LOOKER_CORE_STANDARD_ANNUAL",
 *     region: "us-central1",
 *     publicIpEnabled: true,
 *     adminSettings: {
 *         allowedEmailDomains: ["google.com"],
 *     },
 *     maintenanceWindow: {
 *         dayOfWeek: "THURSDAY",
 *         startTime: {
 *             hours: 22,
 *             minutes: 0,
 *             seconds: 0,
 *             nanos: 0,
 *         },
 *     },
 *     denyMaintenancePeriod: {
 *         startDate: {
 *             year: 2050,
 *             month: 1,
 *             day: 1,
 *         },
 *         endDate: {
 *             year: 2050,
 *             month: 2,
 *             day: 1,
 *         },
 *         time: {
 *             hours: 10,
 *             minutes: 0,
 *             seconds: 0,
 *             nanos: 0,
 *         },
 *     },
 *     oauthConfig: {
 *         clientId: "my-client-id",
 *         clientSecret: "my-client-secret",
 *     },
 * });
 * ```
 * ### Looker Instance Enterprise Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const lookerNetwork = new gcp.compute.Network("looker_network", {name: "looker-network"});
 * const lookerRange = new gcp.compute.GlobalAddress("looker_range", {
 *     name: "looker-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 20,
 *     network: lookerNetwork.id,
 * });
 * const lookerVpcConnection = new gcp.servicenetworking.Connection("looker_vpc_connection", {
 *     network: lookerNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [lookerRange.name],
 * });
 * const looker_instance = new gcp.looker.Instance("looker-instance", {
 *     name: "my-instance",
 *     platformEdition: "LOOKER_CORE_ENTERPRISE_ANNUAL",
 *     region: "us-central1",
 *     privateIpEnabled: true,
 *     publicIpEnabled: false,
 *     reservedRange: lookerRange.name,
 *     consumerNetwork: lookerNetwork.id,
 *     adminSettings: {
 *         allowedEmailDomains: ["google.com"],
 *     },
 *     encryptionConfig: {
 *         kmsKeyName: "looker-kms-key",
 *     },
 *     maintenanceWindow: {
 *         dayOfWeek: "THURSDAY",
 *         startTime: {
 *             hours: 22,
 *             minutes: 0,
 *             seconds: 0,
 *             nanos: 0,
 *         },
 *     },
 *     denyMaintenancePeriod: {
 *         startDate: {
 *             year: 2050,
 *             month: 1,
 *             day: 1,
 *         },
 *         endDate: {
 *             year: 2050,
 *             month: 2,
 *             day: 1,
 *         },
 *         time: {
 *             hours: 10,
 *             minutes: 0,
 *             seconds: 0,
 *             nanos: 0,
 *         },
 *     },
 *     oauthConfig: {
 *         clientId: "my-client-id",
 *         clientSecret: "my-client-secret",
 *     },
 * }, {
 *     dependsOn: [lookerVpcConnection],
 * });
 * const project = gcp.organizations.getProject({});
 * const cryptoKey = new gcp.kms.CryptoKeyIAMMember("crypto_key", {
 *     cryptoKeyId: "looker-kms-key",
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-looker.iam.gserviceaccount.com`),
 * });
 * ```
 * ### Looker Instance Custom Domain
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const looker_instance = new gcp.looker.Instance("looker-instance", {
 *     name: "my-instance",
 *     platformEdition: "LOOKER_CORE_STANDARD_ANNUAL",
 *     region: "us-central1",
 *     oauthConfig: {
 *         clientId: "my-client-id",
 *         clientSecret: "my-client-secret",
 *     },
 *     customDomain: {
 *         domain: "my-custom-domain.com",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Instance can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{region}}/instances/{{name}}`
 *
 * * `{{project}}/{{region}}/{{name}}`
 *
 * * `{{region}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:looker/instance:Instance default projects/{{project}}/locations/{{region}}/instances/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:looker/instance:Instance default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:looker/instance:Instance default {{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:looker/instance:Instance default {{name}}
 * ```
 */
class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["adminSettings"] = state ? state.adminSettings : undefined;
            resourceInputs["consumerNetwork"] = state ? state.consumerNetwork : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["denyMaintenancePeriod"] = state ? state.denyMaintenancePeriod : undefined;
            resourceInputs["egressPublicIp"] = state ? state.egressPublicIp : undefined;
            resourceInputs["encryptionConfig"] = state ? state.encryptionConfig : undefined;
            resourceInputs["ingressPrivateIp"] = state ? state.ingressPrivateIp : undefined;
            resourceInputs["ingressPublicIp"] = state ? state.ingressPublicIp : undefined;
            resourceInputs["lookerUri"] = state ? state.lookerUri : undefined;
            resourceInputs["lookerVersion"] = state ? state.lookerVersion : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oauthConfig"] = state ? state.oauthConfig : undefined;
            resourceInputs["platformEdition"] = state ? state.platformEdition : undefined;
            resourceInputs["privateIpEnabled"] = state ? state.privateIpEnabled : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["publicIpEnabled"] = state ? state.publicIpEnabled : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["reservedRange"] = state ? state.reservedRange : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["userMetadata"] = state ? state.userMetadata : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["adminSettings"] = args ? args.adminSettings : undefined;
            resourceInputs["consumerNetwork"] = args ? args.consumerNetwork : undefined;
            resourceInputs["customDomain"] = args ? args.customDomain : undefined;
            resourceInputs["denyMaintenancePeriod"] = args ? args.denyMaintenancePeriod : undefined;
            resourceInputs["encryptionConfig"] = args ? args.encryptionConfig : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oauthConfig"] = args ? args.oauthConfig : undefined;
            resourceInputs["platformEdition"] = args ? args.platformEdition : undefined;
            resourceInputs["privateIpEnabled"] = args ? args.privateIpEnabled : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["publicIpEnabled"] = args ? args.publicIpEnabled : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["reservedRange"] = args ? args.reservedRange : undefined;
            resourceInputs["userMetadata"] = args ? args.userMetadata : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["egressPublicIp"] = undefined /*out*/;
            resourceInputs["ingressPrivateIp"] = undefined /*out*/;
            resourceInputs["ingressPublicIp"] = undefined /*out*/;
            resourceInputs["lookerUri"] = undefined /*out*/;
            resourceInputs["lookerVersion"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'gcp:looker/instance:Instance';
//# sourceMappingURL=instance.js.map