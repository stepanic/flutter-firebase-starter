"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Backup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * NetApp Volumes supports volume backups, which are copies of your volumes
 * stored independently from the volume. Backups are stored in backup vaults,
 * which are containers for backups. If a volume is lost or deleted, you can
 * use backups to restore your data to a new volume.
 *
 * When you create the first backup of a volume, all of the volume's used
 * data is sent to the backup vault. Subsequent backups of the same volume
 * only include data that has changed from the previous backup. This allows
 * for fast incremental-forever backups and reduces the required capacity
 * inside the backup vault.
 *
 * You can create manual and scheduled backups. Manual backups can be taken
 * from a volume or from an existing volume snapshot. Scheduled backups
 * require a backup policy.
 *
 * To get more information about backup, see:
 *
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.backupVaults.backups)
 * * How-to Guides
 *     * [Documentation](https://cloud.google.com/netapp/volumes/docs/protect-data/about-volume-backups)
 *
 * ## Example Usage
 *
 * ### Netapp Backup
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.compute.getNetwork({
 *     name: "",
 * });
 * const defaultStoragePool = new gcp.netapp.StoragePool("default", {
 *     name: "backup-pool",
 *     location: "us-central1",
 *     serviceLevel: "PREMIUM",
 *     capacityGib: "2048",
 *     network: _default.then(_default => _default.id),
 * });
 * const defaultBackupVault = new gcp.netapp.BackupVault("default", {
 *     name: "backup-vault",
 *     location: defaultStoragePool.location,
 * });
 * const defaultVolume = new gcp.netapp.Volume("default", {
 *     name: "backup-volume",
 *     location: defaultStoragePool.location,
 *     capacityGib: "100",
 *     shareName: "backup-volume",
 *     storagePool: defaultStoragePool.name,
 *     protocols: ["NFSV3"],
 *     deletionPolicy: "FORCE",
 *     backupConfig: {
 *         backupVault: defaultBackupVault.id,
 *     },
 * });
 * const testBackup = new gcp.netapp.Backup("test_backup", {
 *     name: "test-backup",
 *     location: defaultBackupVault.location,
 *     vaultName: defaultBackupVault.name,
 *     sourceVolume: defaultVolume.id,
 * });
 * ```
 *
 * ## Import
 *
 * backup can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}`
 *
 * * `{{project}}/{{location}}/{{vault_name}}/{{name}}`
 *
 * * `{{location}}/{{vault_name}}/{{name}}`
 *
 * When using the `pulumi import` command, backup can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default {{project}}/{{location}}/{{vault_name}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default {{location}}/{{vault_name}}/{{name}}
 * ```
 */
class Backup extends pulumi.CustomResource {
    /**
     * Get an existing Backup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Backup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Backup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backup.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["backupType"] = state ? state.backupType : undefined;
            resourceInputs["chainStorageBytes"] = state ? state.chainStorageBytes : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["sourceSnapshot"] = state ? state.sourceSnapshot : undefined;
            resourceInputs["sourceVolume"] = state ? state.sourceVolume : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vaultName"] = state ? state.vaultName : undefined;
            resourceInputs["volumeUsageBytes"] = state ? state.volumeUsageBytes : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.vaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sourceSnapshot"] = args ? args.sourceSnapshot : undefined;
            resourceInputs["sourceVolume"] = args ? args.sourceVolume : undefined;
            resourceInputs["vaultName"] = args ? args.vaultName : undefined;
            resourceInputs["backupType"] = undefined /*out*/;
            resourceInputs["chainStorageBytes"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["volumeUsageBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Backup.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Backup = Backup;
/** @internal */
Backup.__pulumiType = 'gcp:netapp/backup:Backup';
//# sourceMappingURL=backup.js.map