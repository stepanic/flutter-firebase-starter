import * as pulumi from "@pulumi/pulumi";
/**
 * NetApp Volumes always encrypts your data at rest using volume-specific keys.
 *
 * A CMEK policy (customer-managed encryption key) warps such volume-specific keys in a key stored in Cloud Key Management Service (KMS).
 *
 * To get more information about kmsconfig, see:
 *
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.kmsConfigs)
 * * How-to Guides
 *     * [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/cmek/cmek-overview)
 *
 * ## Example Usage
 *
 * ### Kms Config Create
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const keyring = new gcp.kms.KeyRing("keyring", {
 *     name: "key-ring",
 *     location: "us-central1",
 * });
 * const cryptoKey = new gcp.kms.CryptoKey("crypto_key", {
 *     name: "crypto-name",
 *     keyRing: keyring.id,
 * });
 * const kmsConfig = new gcp.netapp.Kmsconfig("kmsConfig", {
 *     name: "kms-test",
 *     description: "this is a test description",
 *     cryptoKeyName: cryptoKey.id,
 *     location: "us-central1",
 * });
 * ```
 *
 * ## Import
 *
 * kmsconfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, kmsconfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default {{location}}/{{name}}
 * ```
 */
export declare class Kmsconfig extends pulumi.CustomResource {
    /**
     * Get an existing Kmsconfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsconfigState, opts?: pulumi.CustomResourceOptions): Kmsconfig;
    /**
     * Returns true if the given object is an instance of Kmsconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Kmsconfig;
    /**
     * Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
     */
    readonly cryptoKeyName: pulumi.Output<string>;
    /**
     * Description for the CMEK policy.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    readonly effectiveLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access.
     * To make the policy work, a CMEK policy check is required, which verifies key access.
     */
    readonly instructions: pulumi.Output<string>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Name of the policy location. CMEK policies apply to the whole region.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Name of the CMEK policy.
     *
     *
     * - - -
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    readonly pulumiLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The Service account which needs to have access to the  provided KMS key.
     */
    readonly serviceAccount: pulumi.Output<string>;
    /**
     * Create a Kmsconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsconfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Kmsconfig resources.
 */
export interface KmsconfigState {
    /**
     * Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
     */
    cryptoKeyName?: pulumi.Input<string>;
    /**
     * Description for the CMEK policy.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access.
     * To make the policy work, a CMEK policy check is required, which verifies key access.
     */
    instructions?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Name of the policy location. CMEK policies apply to the whole region.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the CMEK policy.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The Service account which needs to have access to the  provided KMS key.
     */
    serviceAccount?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Kmsconfig resource.
 */
export interface KmsconfigArgs {
    /**
     * Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
     */
    cryptoKeyName: pulumi.Input<string>;
    /**
     * Description for the CMEK policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Name of the policy location. CMEK policies apply to the whole region.
     */
    location: pulumi.Input<string>;
    /**
     * Name of the CMEK policy.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
