"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeReplication = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ### Netapp Volume Replication Create
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.compute.getNetwork({
 *     name: "test-network",
 * });
 * const sourcePool = new gcp.netapp.StoragePool("source_pool", {
 *     name: "source-pool",
 *     location: "us-central1",
 *     serviceLevel: "PREMIUM",
 *     capacityGib: "2048",
 *     network: _default.then(_default => _default.id),
 * });
 * const destinationPool = new gcp.netapp.StoragePool("destination_pool", {
 *     name: "destination-pool",
 *     location: "us-west2",
 *     serviceLevel: "PREMIUM",
 *     capacityGib: "2048",
 *     network: _default.then(_default => _default.id),
 * });
 * const sourceVolume = new gcp.netapp.Volume("source_volume", {
 *     location: sourcePool.location,
 *     name: "source-volume",
 *     capacityGib: "100",
 *     shareName: "source-volume",
 *     storagePool: sourcePool.name,
 *     protocols: ["NFSV3"],
 *     deletionPolicy: "FORCE",
 * });
 * const testReplication = new gcp.netapp.VolumeReplication("test_replication", {
 *     location: sourceVolume.location,
 *     volumeName: sourceVolume.name,
 *     name: "test-replication",
 *     replicationSchedule: "EVERY_10_MINUTES",
 *     description: "This is a replication resource",
 *     destinationVolumeParameters: {
 *         storagePool: destinationPool.id,
 *         volumeId: "destination-volume",
 *         shareName: "source-volume",
 *         description: "This is a replicated volume",
 *     },
 *     deleteDestinationVolume: true,
 *     waitForMirror: true,
 * }, {
 *     dependsOn: [sourceVolume],
 * });
 * ```
 *
 * ## Import
 *
 * VolumeReplication can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}`
 *
 * * `{{project}}/{{location}}/{{volume_name}}/{{name}}`
 *
 * * `{{location}}/{{volume_name}}/{{name}}`
 *
 * When using the `pulumi import` command, VolumeReplication can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{project}}/{{location}}/{{volume_name}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{location}}/{{volume_name}}/{{name}}
 * ```
 */
class VolumeReplication extends pulumi.CustomResource {
    /**
     * Get an existing VolumeReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VolumeReplication(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VolumeReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeReplication.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteDestinationVolume"] = state ? state.deleteDestinationVolume : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationVolume"] = state ? state.destinationVolume : undefined;
            resourceInputs["destinationVolumeParameters"] = state ? state.destinationVolumeParameters : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["forceStopping"] = state ? state.forceStopping : undefined;
            resourceInputs["healthy"] = state ? state.healthy : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mirrorState"] = state ? state.mirrorState : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["replicationEnabled"] = state ? state.replicationEnabled : undefined;
            resourceInputs["replicationSchedule"] = state ? state.replicationSchedule : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["sourceVolume"] = state ? state.sourceVolume : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
            resourceInputs["transferStats"] = state ? state.transferStats : undefined;
            resourceInputs["volumeName"] = state ? state.volumeName : undefined;
            resourceInputs["waitForMirror"] = state ? state.waitForMirror : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.replicationSchedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationSchedule'");
            }
            if ((!args || args.volumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeName'");
            }
            resourceInputs["deleteDestinationVolume"] = args ? args.deleteDestinationVolume : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationVolumeParameters"] = args ? args.destinationVolumeParameters : undefined;
            resourceInputs["forceStopping"] = args ? args.forceStopping : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["replicationEnabled"] = args ? args.replicationEnabled : undefined;
            resourceInputs["replicationSchedule"] = args ? args.replicationSchedule : undefined;
            resourceInputs["volumeName"] = args ? args.volumeName : undefined;
            resourceInputs["waitForMirror"] = args ? args.waitForMirror : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["destinationVolume"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["healthy"] = undefined /*out*/;
            resourceInputs["mirrorState"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["sourceVolume"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
            resourceInputs["transferStats"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VolumeReplication.__pulumiType, name, resourceInputs, opts);
    }
}
exports.VolumeReplication = VolumeReplication;
/** @internal */
VolumeReplication.__pulumiType = 'gcp:netapp/volumeReplication:VolumeReplication';
//# sourceMappingURL=volumeReplication.js.map