"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalRange = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The internal range resource for IPAM operations within a VPC network. Used to represent a private address range along with behavioral characterstics of that range (its usage and peering behavior). Networking resources can link to this range if they are created as belonging to it.
 *
 * To get more information about InternalRange, see:
 *
 * * [API documentation](https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest/v1/projects.locations.internalRanges)
 * * How-to Guides
 *     * [Use internal ranges](https://cloud.google.com/vpc/docs/create-use-internal-ranges)
 *
 * ## Example Usage
 *
 * ### Network Connectivity Internal Ranges Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("default", {
 *     name: "internal-ranges",
 *     autoCreateSubnetworks: false,
 * });
 * const _default = new gcp.networkconnectivity.InternalRange("default", {
 *     name: "basic",
 *     description: "Test internal range",
 *     network: defaultNetwork.selfLink,
 *     usage: "FOR_VPC",
 *     peering: "FOR_SELF",
 *     ipCidrRange: "10.0.0.0/24",
 *     labels: {
 *         "label-a": "b",
 *     },
 * });
 * ```
 * ### Network Connectivity Internal Ranges Automatic Reservation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("default", {
 *     name: "internal-ranges",
 *     autoCreateSubnetworks: false,
 * });
 * const _default = new gcp.networkconnectivity.InternalRange("default", {
 *     name: "automatic-reservation",
 *     network: defaultNetwork.id,
 *     usage: "FOR_VPC",
 *     peering: "FOR_SELF",
 *     prefixLength: 24,
 *     targetCidrRanges: ["192.16.0.0/16"],
 * });
 * ```
 * ### Network Connectivity Internal Ranges External Ranges
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("default", {
 *     name: "internal-ranges",
 *     autoCreateSubnetworks: false,
 * });
 * const _default = new gcp.networkconnectivity.InternalRange("default", {
 *     name: "external-ranges",
 *     network: defaultNetwork.id,
 *     usage: "EXTERNAL_TO_VPC",
 *     peering: "FOR_SELF",
 *     ipCidrRange: "172.16.0.0/24",
 *     labels: {
 *         "external-reserved-range": "on-premises",
 *     },
 * });
 * ```
 * ### Network Connectivity Internal Ranges Reserve With Overlap
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("default", {
 *     name: "internal-ranges",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "overlapping-subnet",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: defaultNetwork.id,
 * });
 * const _default = new gcp.networkconnectivity.InternalRange("default", {
 *     name: "overlap-range",
 *     description: "Test internal range",
 *     network: defaultNetwork.id,
 *     usage: "FOR_VPC",
 *     peering: "FOR_SELF",
 *     ipCidrRange: "10.0.0.0/30",
 *     overlaps: ["OVERLAP_EXISTING_SUBNET_RANGE"],
 * }, {
 *     dependsOn: [defaultSubnetwork],
 * });
 * ```
 *
 * ## Import
 *
 * InternalRange can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/internalRanges/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, InternalRange can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default projects/{{project}}/locations/global/internalRanges/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default {{name}}
 * ```
 */
class InternalRange extends pulumi.CustomResource {
    /**
     * Get an existing InternalRange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new InternalRange(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of InternalRange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InternalRange.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["ipCidrRange"] = state ? state.ipCidrRange : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["overlaps"] = state ? state.overlaps : undefined;
            resourceInputs["peering"] = state ? state.peering : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["targetCidrRanges"] = state ? state.targetCidrRanges : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.peering === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peering'");
            }
            if ((!args || args.usage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usage'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipCidrRange"] = args ? args.ipCidrRange : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["overlaps"] = args ? args.overlaps : undefined;
            resourceInputs["peering"] = args ? args.peering : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["targetCidrRanges"] = args ? args.targetCidrRanges : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["users"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(InternalRange.__pulumiType, name, resourceInputs, opts);
    }
}
exports.InternalRange = InternalRange;
/** @internal */
InternalRange.__pulumiType = 'gcp:networkconnectivity/internalRange:InternalRange';
//# sourceMappingURL=internalRange.js.map