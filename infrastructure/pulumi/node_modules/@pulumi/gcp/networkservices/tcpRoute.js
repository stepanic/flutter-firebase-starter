"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TcpRoute = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ### Network Services Tcp Route Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("default", {
 *     name: "backend-service-health-check",
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const _default = new gcp.compute.BackendService("default", {
 *     name: "my-backend-service",
 *     healthChecks: defaultHttpHealthCheck.id,
 * });
 * const defaultTcpRoute = new gcp.networkservices.TcpRoute("default", {
 *     name: "my-tcp-route",
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     rules: [{
 *         matches: [{
 *             address: "10.0.0.1/32",
 *             port: "8081",
 *         }],
 *         action: {
 *             destinations: [{
 *                 serviceName: _default.id,
 *                 weight: 1,
 *             }],
 *             originalDestination: false,
 *         },
 *     }],
 * });
 * ```
 * ### Network Services Tcp Route Actions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("default", {
 *     name: "backend-service-health-check",
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const _default = new gcp.compute.BackendService("default", {
 *     name: "my-backend-service",
 *     healthChecks: defaultHttpHealthCheck.id,
 * });
 * const defaultTcpRoute = new gcp.networkservices.TcpRoute("default", {
 *     name: "my-tcp-route",
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     rules: [{
 *         action: {
 *             destinations: [{
 *                 serviceName: _default.id,
 *                 weight: 1,
 *             }],
 *             originalDestination: false,
 *         },
 *     }],
 * });
 * ```
 * ### Network Services Tcp Route Mesh Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("default", {
 *     name: "backend-service-health-check",
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const _default = new gcp.compute.BackendService("default", {
 *     name: "my-backend-service",
 *     healthChecks: defaultHttpHealthCheck.id,
 * });
 * const defaultMesh = new gcp.networkservices.Mesh("default", {
 *     name: "my-tcp-route",
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 * });
 * const defaultTcpRoute = new gcp.networkservices.TcpRoute("default", {
 *     name: "my-tcp-route",
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     meshes: [defaultMesh.id],
 *     rules: [{
 *         matches: [{
 *             address: "10.0.0.1/32",
 *             port: "8081",
 *         }],
 *         action: {
 *             destinations: [{
 *                 serviceName: _default.id,
 *                 weight: 1,
 *             }],
 *             originalDestination: false,
 *         },
 *     }],
 * });
 * ```
 * ### Network Services Tcp Route Gateway Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("default", {
 *     name: "backend-service-health-check",
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const _default = new gcp.compute.BackendService("default", {
 *     name: "my-backend-service",
 *     healthChecks: defaultHttpHealthCheck.id,
 * });
 * const defaultGateway = new gcp.networkservices.Gateway("default", {
 *     name: "my-tcp-route",
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     scope: "my-scope",
 *     type: "OPEN_MESH",
 *     ports: [443],
 * });
 * const defaultTcpRoute = new gcp.networkservices.TcpRoute("default", {
 *     name: "my-tcp-route",
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     gateways: [defaultGateway.id],
 *     rules: [{
 *         matches: [{
 *             address: "10.0.0.1/32",
 *             port: "8081",
 *         }],
 *         action: {
 *             destinations: [{
 *                 serviceName: _default.id,
 *                 weight: 1,
 *             }],
 *             originalDestination: false,
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * TcpRoute can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/tcpRoutes/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, TcpRoute can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default projects/{{project}}/locations/global/tcpRoutes/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default {{name}}
 * ```
 */
class TcpRoute extends pulumi.CustomResource {
    /**
     * Get an existing TcpRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TcpRoute(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TcpRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TcpRoute.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["gateways"] = state ? state.gateways : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["meshes"] = state ? state.meshes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gateways"] = args ? args.gateways : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["meshes"] = args ? args.meshes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TcpRoute.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TcpRoute = TcpRoute;
/** @internal */
TcpRoute.__pulumiType = 'gcp:networkservices/tcpRoute:TcpRoute';
//# sourceMappingURL=tcpRoute.js.map