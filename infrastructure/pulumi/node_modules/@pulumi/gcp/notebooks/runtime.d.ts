import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A Cloud AI Platform Notebook runtime.
 *
 * > **Note:** Due to limitations of the Notebooks Runtime API, many fields
 * in this resource do not properly detect drift. These fields will also not
 * appear in state once imported.
 *
 * To get more information about Runtime, see:
 *
 * * [API documentation](https://cloud.google.com/ai-platform/notebooks/docs/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/ai-platform-notebooks)
 *
 * ## Example Usage
 *
 * ### Notebook Runtime Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const runtime = new gcp.notebooks.Runtime("runtime", {
 *     name: "notebooks-runtime",
 *     location: "us-central1",
 *     accessConfig: {
 *         accessType: "SINGLE_USER",
 *         runtimeOwner: "admin@hashicorptest.com",
 *     },
 *     virtualMachine: {
 *         virtualMachineConfig: {
 *             machineType: "n1-standard-4",
 *             dataDisk: {
 *                 initializeParams: {
 *                     diskSizeGb: 100,
 *                     diskType: "PD_STANDARD",
 *                 },
 *             },
 *         },
 *     },
 * });
 * ```
 * ### Notebook Runtime Basic Gpu
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const runtimeGpu = new gcp.notebooks.Runtime("runtime_gpu", {
 *     name: "notebooks-runtime-gpu",
 *     location: "us-central1",
 *     accessConfig: {
 *         accessType: "SINGLE_USER",
 *         runtimeOwner: "admin@hashicorptest.com",
 *     },
 *     softwareConfig: {
 *         installGpuDriver: true,
 *     },
 *     virtualMachine: {
 *         virtualMachineConfig: {
 *             machineType: "n1-standard-4",
 *             dataDisk: {
 *                 initializeParams: {
 *                     diskSizeGb: 100,
 *                     diskType: "PD_STANDARD",
 *                 },
 *             },
 *             acceleratorConfig: {
 *                 coreCount: 1,
 *                 type: "NVIDIA_TESLA_V100",
 *             },
 *         },
 *     },
 * });
 * ```
 * ### Notebook Runtime Basic Container
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const runtimeContainer = new gcp.notebooks.Runtime("runtime_container", {
 *     name: "notebooks-runtime-container",
 *     location: "us-central1",
 *     accessConfig: {
 *         accessType: "SINGLE_USER",
 *         runtimeOwner: "admin@hashicorptest.com",
 *     },
 *     virtualMachine: {
 *         virtualMachineConfig: {
 *             machineType: "n1-standard-4",
 *             dataDisk: {
 *                 initializeParams: {
 *                     diskSizeGb: 100,
 *                     diskType: "PD_STANDARD",
 *                 },
 *             },
 *             containerImages: [
 *                 {
 *                     repository: "gcr.io/deeplearning-platform-release/base-cpu",
 *                     tag: "latest",
 *                 },
 *                 {
 *                     repository: "gcr.io/deeplearning-platform-release/beam-notebooks",
 *                     tag: "latest",
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Notebook Runtime Kernels
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const runtimeContainer = new gcp.notebooks.Runtime("runtime_container", {
 *     name: "notebooks-runtime-kernel",
 *     location: "us-central1",
 *     accessConfig: {
 *         accessType: "SINGLE_USER",
 *         runtimeOwner: "admin@hashicorptest.com",
 *     },
 *     softwareConfig: {
 *         kernels: [{
 *             repository: "gcr.io/deeplearning-platform-release/base-cpu",
 *             tag: "latest",
 *         }],
 *     },
 *     virtualMachine: {
 *         virtualMachineConfig: {
 *             machineType: "n1-standard-4",
 *             dataDisk: {
 *                 initializeParams: {
 *                     diskSizeGb: 100,
 *                     diskType: "PD_STANDARD",
 *                 },
 *             },
 *         },
 *     },
 *     labels: {
 *         k: "val",
 *     },
 * });
 * ```
 * ### Notebook Runtime Script
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const runtimeContainer = new gcp.notebooks.Runtime("runtime_container", {
 *     name: "notebooks-runtime-script",
 *     location: "us-central1",
 *     accessConfig: {
 *         accessType: "SINGLE_USER",
 *         runtimeOwner: "admin@hashicorptest.com",
 *     },
 *     softwareConfig: {
 *         postStartupScriptBehavior: "RUN_EVERY_START",
 *     },
 *     virtualMachine: {
 *         virtualMachineConfig: {
 *             machineType: "n1-standard-4",
 *             dataDisk: {
 *                 initializeParams: {
 *                     diskSizeGb: 100,
 *                     diskType: "PD_STANDARD",
 *                 },
 *             },
 *         },
 *     },
 *     labels: {
 *         k: "val",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Runtime can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/runtimes/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, Runtime can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:notebooks/runtime:Runtime default projects/{{project}}/locations/{{location}}/runtimes/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:notebooks/runtime:Runtime default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:notebooks/runtime:Runtime default {{location}}/{{name}}
 * ```
 */
export declare class Runtime extends pulumi.CustomResource {
    /**
     * Get an existing Runtime resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuntimeState, opts?: pulumi.CustomResourceOptions): Runtime;
    /**
     * Returns true if the given object is an instance of Runtime.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Runtime;
    /**
     * The config settings for accessing runtime.
     * Structure is documented below.
     */
    readonly accessConfig: pulumi.Output<outputs.notebooks.RuntimeAccessConfig | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    readonly effectiveLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The health state of this runtime. For a list of possible output
     * values, see `https://cloud.google.com/vertex-ai/docs/workbench/
     * reference/rest/v1/projects.locations.runtimes#healthstate`.
     */
    readonly healthState: pulumi.Output<string>;
    /**
     * The labels to associate with this runtime. Label **keys** must
     * contain 1 to 63 characters, and must conform to [RFC 1035]
     * (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be
     * empty, but, if present, must contain 1 to 63 characters, and must
     * conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No
     * more than 32 labels can be associated with a cluster.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A reference to the zone where the machine resides.
     *
     *
     * - - -
     */
    readonly location: pulumi.Output<string>;
    /**
     * Contains Runtime daemon metrics such as Service status and JupyterLab
     * status
     * Structure is documented below.
     */
    readonly metrics: pulumi.Output<outputs.notebooks.RuntimeMetric[]>;
    /**
     * The name specified for the Notebook runtime.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    readonly pulumiLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The config settings for software inside the runtime.
     * Structure is documented below.
     */
    readonly softwareConfig: pulumi.Output<outputs.notebooks.RuntimeSoftwareConfig>;
    /**
     * The state of this runtime.
     */
    readonly state: pulumi.Output<string>;
    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     */
    readonly virtualMachine: pulumi.Output<outputs.notebooks.RuntimeVirtualMachine | undefined>;
    /**
     * Create a Runtime resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuntimeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Runtime resources.
 */
export interface RuntimeState {
    /**
     * The config settings for accessing runtime.
     * Structure is documented below.
     */
    accessConfig?: pulumi.Input<inputs.notebooks.RuntimeAccessConfig>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The health state of this runtime. For a list of possible output
     * values, see `https://cloud.google.com/vertex-ai/docs/workbench/
     * reference/rest/v1/projects.locations.runtimes#healthstate`.
     */
    healthState?: pulumi.Input<string>;
    /**
     * The labels to associate with this runtime. Label **keys** must
     * contain 1 to 63 characters, and must conform to [RFC 1035]
     * (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be
     * empty, but, if present, must contain 1 to 63 characters, and must
     * conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No
     * more than 32 labels can be associated with a cluster.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A reference to the zone where the machine resides.
     *
     *
     * - - -
     */
    location?: pulumi.Input<string>;
    /**
     * Contains Runtime daemon metrics such as Service status and JupyterLab
     * status
     * Structure is documented below.
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.notebooks.RuntimeMetric>[]>;
    /**
     * The name specified for the Notebook runtime.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The config settings for software inside the runtime.
     * Structure is documented below.
     */
    softwareConfig?: pulumi.Input<inputs.notebooks.RuntimeSoftwareConfig>;
    /**
     * The state of this runtime.
     */
    state?: pulumi.Input<string>;
    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     */
    virtualMachine?: pulumi.Input<inputs.notebooks.RuntimeVirtualMachine>;
}
/**
 * The set of arguments for constructing a Runtime resource.
 */
export interface RuntimeArgs {
    /**
     * The config settings for accessing runtime.
     * Structure is documented below.
     */
    accessConfig?: pulumi.Input<inputs.notebooks.RuntimeAccessConfig>;
    /**
     * The labels to associate with this runtime. Label **keys** must
     * contain 1 to 63 characters, and must conform to [RFC 1035]
     * (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be
     * empty, but, if present, must contain 1 to 63 characters, and must
     * conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No
     * more than 32 labels can be associated with a cluster.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A reference to the zone where the machine resides.
     *
     *
     * - - -
     */
    location: pulumi.Input<string>;
    /**
     * The name specified for the Notebook runtime.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The config settings for software inside the runtime.
     * Structure is documented below.
     */
    softwareConfig?: pulumi.Input<inputs.notebooks.RuntimeSoftwareConfig>;
    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     */
    virtualMachine?: pulumi.Input<inputs.notebooks.RuntimeVirtualMachine>;
}
