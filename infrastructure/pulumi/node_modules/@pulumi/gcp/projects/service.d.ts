import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = new gcp.projects.Service("project", {
 *     project: "your-project-id",
 *     service: "iam.googleapis.com",
 *     disableOnDestroy: false,
 * });
 * ```
 *
 * ## Import
 *
 * Project services can be imported using the `project_id` and `service`, e.g.
 *
 * * `{{project_id}}/{{service}}`
 *
 * When using the `pulumi import` command, project services can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:projects/service:Service default {{project_id}}/{{service}}
 * ```
 *
 * Note that unlike other resources that fail if they already exist,
 *
 * `pulumi up` can be successfully used to verify already enabled services.
 *
 * This means that when importing existing resources into Terraform, you can either
 *
 * import the `google_project_service` resources or treat them as new
 *
 * infrastructure and run `pulumi up` to add them to state.
 */
export declare class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service;
    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Service;
    /**
     * Beta
     * If `true`, the usage of the service to be disabled will be checked and an error
     * will be returned if the service to be disabled has usage in last 30 days.
     * Defaults to `false`.
     */
    readonly checkIfServiceHasUsageOnDestroy: pulumi.Output<boolean | undefined>;
    /**
     * If `true`, services that are enabled
     * and which depend on this service should also be disabled when this service is
     * destroyed. If `false` or unset, an error will be generated if any enabled
     * services depend on this service when destroying it.
     */
    readonly disableDependentServices: pulumi.Output<boolean | undefined>;
    readonly disableOnDestroy: pulumi.Output<boolean | undefined>;
    /**
     * The project ID. If not provided, the provider project
     * is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The service to enable.
     */
    readonly service: pulumi.Output<string>;
    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Beta
     * If `true`, the usage of the service to be disabled will be checked and an error
     * will be returned if the service to be disabled has usage in last 30 days.
     * Defaults to `false`.
     */
    checkIfServiceHasUsageOnDestroy?: pulumi.Input<boolean>;
    /**
     * If `true`, services that are enabled
     * and which depend on this service should also be disabled when this service is
     * destroyed. If `false` or unset, an error will be generated if any enabled
     * services depend on this service when destroying it.
     */
    disableDependentServices?: pulumi.Input<boolean>;
    disableOnDestroy?: pulumi.Input<boolean>;
    /**
     * The project ID. If not provided, the provider project
     * is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The service to enable.
     */
    service?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Beta
     * If `true`, the usage of the service to be disabled will be checked and an error
     * will be returned if the service to be disabled has usage in last 30 days.
     * Defaults to `false`.
     */
    checkIfServiceHasUsageOnDestroy?: pulumi.Input<boolean>;
    /**
     * If `true`, services that are enabled
     * and which depend on this service should also be disabled when this service is
     * destroyed. If `false` or unset, an error will be generated if any enabled
     * services depend on this service when destroying it.
     */
    disableDependentServices?: pulumi.Input<boolean>;
    disableOnDestroy?: pulumi.Input<boolean>;
    /**
     * The project ID. If not provided, the provider project
     * is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The service to enable.
     */
    service: pulumi.Input<string>;
}
