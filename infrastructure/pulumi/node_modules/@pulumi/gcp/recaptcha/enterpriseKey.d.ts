import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * The RecaptchaEnterprise Key resource
 *
 * ## Example Usage
 *
 * ### Android_key
 * A basic test of recaptcha enterprise key that can be used by Android apps
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     androidSettings: {
 *         allowAllPackageNames: true,
 *         allowedPackageNames: [],
 *     },
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingScore: 0.8,
 *     },
 *     labels: {
 *         "label-one": "value-one",
 *     },
 * });
 * ```
 * ### Ios_key
 * A basic test of recaptcha enterprise key that can be used by iOS apps
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     iosSettings: {
 *         allowAllBundleIds: true,
 *         allowedBundleIds: [],
 *     },
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingScore: 1,
 *     },
 *     labels: {
 *         "label-one": "value-one",
 *     },
 * });
 * ```
 * ### Minimal_key
 * A minimal test of recaptcha enterprise key
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     project: "my-project-name",
 *     webSettings: {
 *         integrationType: "SCORE",
 *         allowAllDomains: true,
 *     },
 *     labels: {},
 * });
 * ```
 * ### Waf_key
 * A basic test of recaptcha enterprise key that includes WAF settings
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingChallenge: "NOCAPTCHA",
 *         testingScore: 0.5,
 *     },
 *     wafSettings: {
 *         wafFeature: "CHALLENGE_PAGE",
 *         wafService: "CA",
 *     },
 *     webSettings: {
 *         integrationType: "INVISIBLE",
 *         allowAllDomains: true,
 *         allowedDomains: [],
 *         challengeSecurityPreference: "USABILITY",
 *     },
 *     labels: {
 *         "label-one": "value-one",
 *     },
 * });
 * ```
 * ### Web_key
 * A basic test of recaptcha enterprise key that can be used by websites
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingChallenge: "NOCAPTCHA",
 *         testingScore: 0.5,
 *     },
 *     webSettings: {
 *         integrationType: "CHECKBOX",
 *         allowAllDomains: true,
 *         allowedDomains: [],
 *         challengeSecurityPreference: "USABILITY",
 *     },
 *     labels: {
 *         "label-one": "value-one",
 *     },
 * });
 * ```
 * ### Web_score_key
 * A basic test of recaptcha enterprise key with score integration type that can be used by websites
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingScore: 0.5,
 *     },
 *     webSettings: {
 *         integrationType: "SCORE",
 *         allowAllDomains: true,
 *         allowAmpTraffic: false,
 *         allowedDomains: [],
 *     },
 *     labels: {
 *         "label-one": "value-one",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Key can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/keys/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, Key can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default projects/{{project}}/keys/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default {{name}}
 * ```
 */
export declare class EnterpriseKey extends pulumi.CustomResource {
    /**
     * Get an existing EnterpriseKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnterpriseKeyState, opts?: pulumi.CustomResourceOptions): EnterpriseKey;
    /**
     * Returns true if the given object is an instance of EnterpriseKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EnterpriseKey;
    /**
     * Settings for keys that can be used by Android apps.
     */
    readonly androidSettings: pulumi.Output<outputs.recaptcha.EnterpriseKeyAndroidSettings | undefined>;
    /**
     * The timestamp corresponding to the creation of this Key.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     *
     *
     *
     * - - -
     */
    readonly displayName: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    readonly effectiveLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    readonly iosSettings: pulumi.Output<outputs.recaptcha.EnterpriseKeyIosSettings | undefined>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The resource id for the Key, which is the same as the Site Key itself.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    readonly pulumiLabels: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Options for user acceptance testing.
     */
    readonly testingOptions: pulumi.Output<outputs.recaptcha.EnterpriseKeyTestingOptions | undefined>;
    /**
     * Settings specific to keys that can be used for WAF (Web Application Firewall).
     */
    readonly wafSettings: pulumi.Output<outputs.recaptcha.EnterpriseKeyWafSettings | undefined>;
    /**
     * Settings for keys that can be used by websites.
     */
    readonly webSettings: pulumi.Output<outputs.recaptcha.EnterpriseKeyWebSettings | undefined>;
    /**
     * Create a EnterpriseKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnterpriseKeyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering EnterpriseKey resources.
 */
export interface EnterpriseKeyState {
    /**
     * Settings for keys that can be used by Android apps.
     */
    androidSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyAndroidSettings>;
    /**
     * The timestamp corresponding to the creation of this Key.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     *
     *
     *
     * - - -
     */
    displayName?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    iosSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyIosSettings>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The resource id for the Key, which is the same as the Site Key itself.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Options for user acceptance testing.
     */
    testingOptions?: pulumi.Input<inputs.recaptcha.EnterpriseKeyTestingOptions>;
    /**
     * Settings specific to keys that can be used for WAF (Web Application Firewall).
     */
    wafSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyWafSettings>;
    /**
     * Settings for keys that can be used by websites.
     */
    webSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyWebSettings>;
}
/**
 * The set of arguments for constructing a EnterpriseKey resource.
 */
export interface EnterpriseKeyArgs {
    /**
     * Settings for keys that can be used by Android apps.
     */
    androidSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyAndroidSettings>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     *
     *
     *
     * - - -
     */
    displayName: pulumi.Input<string>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    iosSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyIosSettings>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Options for user acceptance testing.
     */
    testingOptions?: pulumi.Input<inputs.recaptcha.EnterpriseKeyTestingOptions>;
    /**
     * Settings specific to keys that can be used for WAF (Web Application Firewall).
     */
    wafSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyWafSettings>;
    /**
     * Settings for keys that can be used by websites.
     */
    webSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyWebSettings>;
}
