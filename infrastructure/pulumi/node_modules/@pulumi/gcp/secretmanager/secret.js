"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secret = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Secret is a logical secret whose value and versions can be accessed.
 *
 * To get more information about Secret, see:
 *
 * * [API documentation](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets)
 *
 * ## Example Usage
 *
 * ### Secret Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secret_basic = new gcp.secretmanager.Secret("secret-basic", {
 *     secretId: "secret",
 *     labels: {
 *         label: "my-label",
 *     },
 *     replication: {
 *         userManaged: {
 *             replicas: [
 *                 {
 *                     location: "us-central1",
 *                 },
 *                 {
 *                     location: "us-east1",
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Secret With Annotations
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secret_with_annotations = new gcp.secretmanager.Secret("secret-with-annotations", {
 *     secretId: "secret",
 *     labels: {
 *         label: "my-label",
 *     },
 *     annotations: {
 *         key1: "someval",
 *         key2: "someval2",
 *         key3: "someval3",
 *         key4: "someval4",
 *         key5: "someval5",
 *     },
 *     replication: {
 *         auto: {},
 *     },
 * });
 * ```
 * ### Secret With Version Destroy Ttl
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secret_with_version_destroy_ttl = new gcp.secretmanager.Secret("secret-with-version-destroy-ttl", {
 *     secretId: "secret",
 *     versionDestroyTtl: "2592000s",
 *     replication: {
 *         auto: {},
 *     },
 * });
 * ```
 * ### Secret With Automatic Cmek
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const kms_secret_binding = new gcp.kms.CryptoKeyIAMMember("kms-secret-binding", {
 *     cryptoKeyId: "kms-key",
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com`),
 * });
 * const secret_with_automatic_cmek = new gcp.secretmanager.Secret("secret-with-automatic-cmek", {
 *     secretId: "secret",
 *     replication: {
 *         auto: {
 *             customerManagedEncryption: {
 *                 kmsKeyName: "kms-key",
 *             },
 *         },
 *     },
 * }, {
 *     dependsOn: [kms_secret_binding],
 * });
 * ```
 *
 * ## Import
 *
 * Secret can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/secrets/{{secret_id}}`
 *
 * * `{{project}}/{{secret_id}}`
 *
 * * `{{secret_id}}`
 *
 * When using the `pulumi import` command, Secret can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:secretmanager/secret:Secret default projects/{{project}}/secrets/{{secret_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:secretmanager/secret:Secret default {{project}}/{{secret_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:secretmanager/secret:Secret default {{secret_id}}
 * ```
 */
class Secret extends pulumi.CustomResource {
    /**
     * Get an existing Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Secret(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secret.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["rotation"] = state ? state.rotation : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["versionAliases"] = state ? state.versionAliases : undefined;
            resourceInputs["versionDestroyTtl"] = state ? state.versionDestroyTtl : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.replication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replication'");
            }
            if ((!args || args.secretId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["expireTime"] = args ? args.expireTime : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["rotation"] = args ? args.rotation : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["versionAliases"] = args ? args.versionAliases : undefined;
            resourceInputs["versionDestroyTtl"] = args ? args.versionDestroyTtl : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Secret.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Secret = Secret;
/** @internal */
Secret.__pulumiType = 'gcp:secretmanager/secret:Secret';
//# sourceMappingURL=secret.js.map