import * as pulumi from "@pulumi/pulumi";
/**
 * Mute Findings is a volume management feature in Security Command Center
 * that lets you manually or programmatically hide irrelevant findings,
 * and create filters to automatically silence existing and future
 * findings based on criteria you specify.
 *
 * To get more information about OrganizationMuteConfig, see:
 *
 * * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.muteConfigs)
 *
 * ## Example Usage
 *
 * ### Scc V2 Organization Mute Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.securitycenter.V2OrganizationMuteConfig("default", {
 *     muteConfigId: "my-config",
 *     organization: "123456789",
 *     location: "global",
 *     description: "My custom Cloud Security Command Center Finding Organization mute Configuration",
 *     filter: "severity = \"HIGH\"",
 *     type: "STATIC",
 * });
 * ```
 *
 * ## Import
 *
 * OrganizationMuteConfig can be imported using any of these accepted formats:
 *
 * * `organizations/{{organization}}/locations/{{location}}/muteConfigs/{{mute_config_id}}`
 *
 * * `{{organization}}/{{location}}/{{mute_config_id}}`
 *
 * When using the `pulumi import` command, OrganizationMuteConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig default organizations/{{organization}}/locations/{{location}}/muteConfigs/{{mute_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig default {{organization}}/{{location}}/{{mute_config_id}}
 * ```
 */
export declare class V2OrganizationMuteConfig extends pulumi.CustomResource {
    /**
     * Get an existing V2OrganizationMuteConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2OrganizationMuteConfigState, opts?: pulumi.CustomResourceOptions): V2OrganizationMuteConfig;
    /**
     * Returns true if the given object is an instance of V2OrganizationMuteConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is V2OrganizationMuteConfig;
    /**
     * The time at which the mute config was created. This field is set by
     * the server and will be ignored if provided on config creation.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * A description of the mute config.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    readonly filter: pulumi.Output<string>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * Email address of the user who last edited the mute config. This
     * field is set by the server and will be ignored if provided on
     * config creation or update.
     */
    readonly mostRecentEditor: pulumi.Output<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     *
     *
     * - - -
     */
    readonly muteConfigId: pulumi.Output<string>;
    /**
     * Name of the mute config. Its format is
     * organizations/{organization}/locations/global/muteConfigs/{configId},
     * folders/{folder}/locations/global/muteConfigs/{configId},
     * or projects/{project}/locations/global/muteConfigs/{configId}
     */
    readonly name: pulumi.Output<string>;
    /**
     * The organization whose Cloud Security Command Center the Mute
     * Config lives in.
     */
    readonly organization: pulumi.Output<string>;
    /**
     * The type of the mute config.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Output only. The most recent time at which the mute config was
     * updated. This field is set by the server and will be ignored if
     * provided on config creation or update.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a V2OrganizationMuteConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2OrganizationMuteConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering V2OrganizationMuteConfig resources.
 */
export interface V2OrganizationMuteConfigState {
    /**
     * The time at which the mute config was created. This field is set by
     * the server and will be ignored if provided on config creation.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A description of the mute config.
     */
    description?: pulumi.Input<string>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    filter?: pulumi.Input<string>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    location?: pulumi.Input<string>;
    /**
     * Email address of the user who last edited the mute config. This
     * field is set by the server and will be ignored if provided on
     * config creation or update.
     */
    mostRecentEditor?: pulumi.Input<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     *
     *
     * - - -
     */
    muteConfigId?: pulumi.Input<string>;
    /**
     * Name of the mute config. Its format is
     * organizations/{organization}/locations/global/muteConfigs/{configId},
     * folders/{folder}/locations/global/muteConfigs/{configId},
     * or projects/{project}/locations/global/muteConfigs/{configId}
     */
    name?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Mute
     * Config lives in.
     */
    organization?: pulumi.Input<string>;
    /**
     * The type of the mute config.
     */
    type?: pulumi.Input<string>;
    /**
     * Output only. The most recent time at which the mute config was
     * updated. This field is set by the server and will be ignored if
     * provided on config creation or update.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a V2OrganizationMuteConfig resource.
 */
export interface V2OrganizationMuteConfigArgs {
    /**
     * A description of the mute config.
     */
    description?: pulumi.Input<string>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    filter: pulumi.Input<string>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    location?: pulumi.Input<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     *
     *
     * - - -
     */
    muteConfigId: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Mute
     * Config lives in.
     */
    organization: pulumi.Input<string>;
    /**
     * The type of the mute config.
     */
    type: pulumi.Input<string>;
}
