import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A Cloud Security Command Center (Cloud SCC) notification configs. A
 * notification config is a Cloud SCC resource that contains the
 * configuration to send notifications for create/update events of
 * findings, assets and etc.
 * > **Note:** In order to use Cloud SCC resources, your organization must be enrolled
 * in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
 * Without doing so, you may run into errors during resource creation.
 *
 * To get more information about OrganizationNotificationConfig, see:
 *
 * * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.locations.notificationConfigs)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/security-command-center/docs)
 *
 * ## Example Usage
 *
 * ### Scc V2 Organization Notification Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const sccV2OrganizationNotificationConfig = new gcp.pubsub.Topic("scc_v2_organization_notification_config", {name: "my-topic"});
 * const customOrganizationNotificationConfig = new gcp.securitycenter.V2OrganizationNotificationConfig("custom_organization_notification_config", {
 *     configId: "my-config",
 *     organization: "123456789",
 *     location: "global",
 *     description: "My custom Cloud Security Command Center Finding Organization Notification Configuration",
 *     pubsubTopic: sccV2OrganizationNotificationConfig.id,
 *     streamingConfig: {
 *         filter: "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * OrganizationNotificationConfig can be imported using any of these accepted formats:
 *
 * * `organizations/{{organization}}/locations/{{location}}/notificationConfigs/{{name}}`
 *
 * * `{{organization}}/{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, OrganizationNotificationConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig default organizations/{{organization}}/locations/{{location}}/notificationConfigs/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig default {{organization}}/{{location}}/{{name}}
 * ```
 */
export declare class V2OrganizationNotificationConfig extends pulumi.CustomResource {
    /**
     * Get an existing V2OrganizationNotificationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2OrganizationNotificationConfigState, opts?: pulumi.CustomResourceOptions): V2OrganizationNotificationConfig;
    /**
     * Returns true if the given object is an instance of V2OrganizationNotificationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is V2OrganizationNotificationConfig;
    /**
     * This must be unique within the organization.
     */
    readonly configId: pulumi.Output<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The resource name of this notification config, in the format
     * `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification
     * Config lives in.
     */
    readonly organization: pulumi.Output<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is
     * "projects/[projectId]/topics/[topic]".
     */
    readonly pubsubTopic: pulumi.Output<string>;
    /**
     * The service account that needs "pubsub.topics.publish" permission to
     * publish to the Pub/Sub topic.
     */
    readonly serviceAccount: pulumi.Output<string>;
    /**
     * The config for triggering streaming-based notifications.
     * Structure is documented below.
     */
    readonly streamingConfig: pulumi.Output<outputs.securitycenter.V2OrganizationNotificationConfigStreamingConfig>;
    /**
     * Create a V2OrganizationNotificationConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2OrganizationNotificationConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering V2OrganizationNotificationConfig resources.
 */
export interface V2OrganizationNotificationConfigState {
    /**
     * This must be unique within the organization.
     */
    configId?: pulumi.Input<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    description?: pulumi.Input<string>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of this notification config, in the format
     * `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification
     * Config lives in.
     */
    organization?: pulumi.Input<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is
     * "projects/[projectId]/topics/[topic]".
     */
    pubsubTopic?: pulumi.Input<string>;
    /**
     * The service account that needs "pubsub.topics.publish" permission to
     * publish to the Pub/Sub topic.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The config for triggering streaming-based notifications.
     * Structure is documented below.
     */
    streamingConfig?: pulumi.Input<inputs.securitycenter.V2OrganizationNotificationConfigStreamingConfig>;
}
/**
 * The set of arguments for constructing a V2OrganizationNotificationConfig resource.
 */
export interface V2OrganizationNotificationConfigArgs {
    /**
     * This must be unique within the organization.
     */
    configId: pulumi.Input<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    description?: pulumi.Input<string>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    location?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification
     * Config lives in.
     */
    organization: pulumi.Input<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is
     * "projects/[projectId]/topics/[topic]".
     */
    pubsubTopic: pulumi.Input<string>;
    /**
     * The config for triggering streaming-based notifications.
     * Structure is documented below.
     */
    streamingConfig: pulumi.Input<inputs.securitycenter.V2OrganizationNotificationConfigStreamingConfig>;
}
