"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostureDeployment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a deployment of a security posture on a resource. A posture contains user curated policy sets. A posture can
 * be deployed on a project or on a folder or on an organization. To deploy a posture we need to populate the posture's name
 * and its revisionId in the posture deployment configuration. Every update to a deployed posture generates a new revision_id.
 * Thus, the updated revisionId should be used in the respective posture deployment's configuration to deploy that posture
 * on a resource.
 *
 * To get more information about PostureDeployment, see:
 *
 * * How-to Guides
 *     * [Create and deploy a posture](https://cloud.google.com/security-command-center/docs/how-to-use-security-posture)
 *
 * ## Import
 *
 * PostureDeployment can be imported using any of these accepted formats:
 *
 * * `{{parent}}/locations/{{location}}/postureDeployments/{{posture_deployment_id}}`
 *
 * When using the `pulumi import` command, PostureDeployment can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:securityposture/postureDeployment:PostureDeployment default {{parent}}/locations/{{location}}/postureDeployments/{{posture_deployment_id}}
 * ```
 */
class PostureDeployment extends pulumi.CustomResource {
    /**
     * Get an existing PostureDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PostureDeployment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PostureDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PostureDeployment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredPostureId"] = state ? state.desiredPostureId : undefined;
            resourceInputs["desiredPostureRevisionId"] = state ? state.desiredPostureRevisionId : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["failureMessage"] = state ? state.failureMessage : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["postureDeploymentId"] = state ? state.postureDeploymentId : undefined;
            resourceInputs["postureId"] = state ? state.postureId : undefined;
            resourceInputs["postureRevisionId"] = state ? state.postureRevisionId : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetResource"] = state ? state.targetResource : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if ((!args || args.postureDeploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureDeploymentId'");
            }
            if ((!args || args.postureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureId'");
            }
            if ((!args || args.postureRevisionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureRevisionId'");
            }
            if ((!args || args.targetResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResource'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["postureDeploymentId"] = args ? args.postureDeploymentId : undefined;
            resourceInputs["postureId"] = args ? args.postureId : undefined;
            resourceInputs["postureRevisionId"] = args ? args.postureRevisionId : undefined;
            resourceInputs["targetResource"] = args ? args.targetResource : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["desiredPostureId"] = undefined /*out*/;
            resourceInputs["desiredPostureRevisionId"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["failureMessage"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PostureDeployment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PostureDeployment = PostureDeployment;
/** @internal */
PostureDeployment.__pulumiType = 'gcp:securityposture/postureDeployment:PostureDeployment';
//# sourceMappingURL=postureDeployment.js.map