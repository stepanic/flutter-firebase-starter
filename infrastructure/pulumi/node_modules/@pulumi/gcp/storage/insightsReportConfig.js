"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsightsReportConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents an inventory report configuration.
 *
 * To get more information about ReportConfig, see:
 *
 * * [API documentation](https://cloud.google.com/storage/docs/json_api/v1/reportConfig)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/storage/docs/insights/using-storage-insights)
 *
 * ## Example Usage
 *
 * ### Storage Insights Report Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const reportBucket = new gcp.storage.Bucket("report_bucket", {
 *     name: "my-bucket",
 *     location: "us-central1",
 *     forceDestroy: true,
 *     uniformBucketLevelAccess: true,
 * });
 * const admin = new gcp.storage.BucketIAMMember("admin", {
 *     bucket: reportBucket.name,
 *     role: "roles/storage.admin",
 *     member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-storageinsights.iam.gserviceaccount.com`),
 * });
 * const config = new gcp.storage.InsightsReportConfig("config", {
 *     displayName: "Test Report Config",
 *     location: "us-central1",
 *     frequencyOptions: {
 *         frequency: "WEEKLY",
 *         startDate: {
 *             day: 15,
 *             month: 3,
 *             year: 2050,
 *         },
 *         endDate: {
 *             day: 15,
 *             month: 4,
 *             year: 2050,
 *         },
 *     },
 *     csvOptions: {
 *         recordSeparator: "\n",
 *         delimiter: ",",
 *         headerRequired: false,
 *     },
 *     objectMetadataReportOptions: {
 *         metadataFields: [
 *             "bucket",
 *             "name",
 *             "project",
 *         ],
 *         storageFilters: {
 *             bucket: reportBucket.name,
 *         },
 *         storageDestinationOptions: {
 *             bucket: reportBucket.name,
 *             destinationPath: "test-insights-reports",
 *         },
 *     },
 * }, {
 *     dependsOn: [admin],
 * });
 * ```
 *
 * ## Import
 *
 * ReportConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/reportConfigs/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, ReportConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:storage/insightsReportConfig:InsightsReportConfig default projects/{{project}}/locations/{{location}}/reportConfigs/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:storage/insightsReportConfig:InsightsReportConfig default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:storage/insightsReportConfig:InsightsReportConfig default {{location}}/{{name}}
 * ```
 */
class InsightsReportConfig extends pulumi.CustomResource {
    /**
     * Get an existing InsightsReportConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new InsightsReportConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of InsightsReportConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InsightsReportConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["csvOptions"] = state ? state.csvOptions : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["frequencyOptions"] = state ? state.frequencyOptions : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectMetadataReportOptions"] = state ? state.objectMetadataReportOptions : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.csvOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'csvOptions'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["csvOptions"] = args ? args.csvOptions : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["frequencyOptions"] = args ? args.frequencyOptions : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["objectMetadataReportOptions"] = args ? args.objectMetadataReportOptions : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InsightsReportConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.InsightsReportConfig = InsightsReportConfig;
/** @internal */
InsightsReportConfig.__pulumiType = 'gcp:storage/insightsReportConfig:InsightsReportConfig';
//# sourceMappingURL=insightsReportConfig.js.map