"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AiDeploymentResourcePool = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * 'DeploymentResourcePool can be shared by multiple deployed models,
 * whose underlying specification consists of dedicated resources.'
 *
 * To get more information about DeploymentResourcePool, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.deploymentResourcePools)
 *
 * ## Example Usage
 *
 * ### Vertex Ai Deployment Resource Pool
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const deploymentResourcePool = new gcp.vertex.AiDeploymentResourcePool("deployment_resource_pool", {
 *     region: "us-central1",
 *     name: "example-deployment-resource-pool",
 *     dedicatedResources: {
 *         machineSpec: {
 *             machineType: "n1-standard-4",
 *             acceleratorType: "NVIDIA_TESLA_K80",
 *             acceleratorCount: 1,
 *         },
 *         minReplicaCount: 1,
 *         maxReplicaCount: 2,
 *         autoscalingMetricSpecs: [{
 *             metricName: "aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle",
 *             target: 60,
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * DeploymentResourcePool can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{region}}/deploymentResourcePools/{{name}}`
 *
 * * `{{project}}/{{region}}/{{name}}`
 *
 * * `{{region}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, DeploymentResourcePool can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default projects/{{project}}/locations/{{region}}/deploymentResourcePools/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{name}}
 * ```
 */
class AiDeploymentResourcePool extends pulumi.CustomResource {
    /**
     * Get an existing AiDeploymentResourcePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AiDeploymentResourcePool(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AiDeploymentResourcePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiDeploymentResourcePool.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dedicatedResources"] = state ? state.dedicatedResources : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["dedicatedResources"] = args ? args.dedicatedResources : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AiDeploymentResourcePool.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AiDeploymentResourcePool = AiDeploymentResourcePool;
/** @internal */
AiDeploymentResourcePool.__pulumiType = 'gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool';
//# sourceMappingURL=aiDeploymentResourcePool.js.map