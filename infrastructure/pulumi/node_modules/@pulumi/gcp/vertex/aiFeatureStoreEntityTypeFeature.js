"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AiFeatureStoreEntityTypeFeature = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Feature Metadata information that describes an attribute of an entity type. For example, apple is an entity type, and color is a feature that describes apple.
 *
 * To get more information about FeaturestoreEntitytypeFeature, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
 *
 * ## Example Usage
 *
 * ### Vertex Ai Featurestore Entitytype Feature
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     name: "terraform",
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 * });
 * const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
 *     name: "terraform",
 *     labels: {
 *         foo: "bar",
 *     },
 *     featurestore: featurestore.id,
 * });
 * const feature = new gcp.vertex.AiFeatureStoreEntityTypeFeature("feature", {
 *     name: "terraform",
 *     labels: {
 *         foo: "bar",
 *     },
 *     entitytype: entity.id,
 *     valueType: "INT64_ARRAY",
 * });
 * ```
 * ### Vertex Ai Featurestore Entitytype Feature With Beta Fields
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     name: "terraform2",
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 * });
 * const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
 *     name: "terraform2",
 *     labels: {
 *         foo: "bar",
 *     },
 *     featurestore: featurestore.id,
 *     monitoringConfig: {
 *         snapshotAnalysis: {
 *             disabled: false,
 *             monitoringInterval: "86400s",
 *         },
 *         categoricalThresholdConfig: {
 *             value: 0.3,
 *         },
 *         numericalThresholdConfig: {
 *             value: 0.3,
 *         },
 *     },
 * });
 * const feature = new gcp.vertex.AiFeatureStoreEntityTypeFeature("feature", {
 *     name: "terraform2",
 *     labels: {
 *         foo: "bar",
 *     },
 *     entitytype: entity.id,
 *     valueType: "INT64_ARRAY",
 * });
 * ```
 *
 * ## Import
 *
 * FeaturestoreEntitytypeFeature can be imported using any of these accepted formats:
 *
 * * `{{entitytype}}/features/{{name}}`
 *
 * When using the `pulumi import` command, FeaturestoreEntitytypeFeature can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature default {{entitytype}}/features/{{name}}
 * ```
 */
class AiFeatureStoreEntityTypeFeature extends pulumi.CustomResource {
    /**
     * Get an existing AiFeatureStoreEntityTypeFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AiFeatureStoreEntityTypeFeature(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AiFeatureStoreEntityTypeFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiFeatureStoreEntityTypeFeature.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["entitytype"] = state ? state.entitytype : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["valueType"] = state ? state.valueType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.entitytype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitytype'");
            }
            if ((!args || args.valueType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'valueType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entitytype"] = args ? args.entitytype : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["valueType"] = args ? args.valueType : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AiFeatureStoreEntityTypeFeature.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AiFeatureStoreEntityTypeFeature = AiFeatureStoreEntityTypeFeature;
/** @internal */
AiFeatureStoreEntityTypeFeature.__pulumiType = 'gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature';
//# sourceMappingURL=aiFeatureStoreEntityTypeFeature.js.map