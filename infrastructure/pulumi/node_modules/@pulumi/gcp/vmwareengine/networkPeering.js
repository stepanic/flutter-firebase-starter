"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkPeering = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a network peering resource. Network peerings are global resources.
 *
 * To get more information about NetworkPeering, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/networks/addPeering)
 *
 * ## Example Usage
 *
 * ### Vmware Engine Network Peering Ven
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network_peering_nw = new gcp.vmwareengine.Network("network-peering-nw", {
 *     name: "default-np-nw",
 *     location: "global",
 *     type: "STANDARD",
 * });
 * const network_peering_peer_nw = new gcp.vmwareengine.Network("network-peering-peer-nw", {
 *     name: "peer-np-nw",
 *     location: "global",
 *     type: "STANDARD",
 * });
 * const vmw_engine_network_peering = new gcp.vmwareengine.NetworkPeering("vmw-engine-network-peering", {
 *     name: "sample-network-peering",
 *     description: "Sample description",
 *     vmwareEngineNetwork: network_peering_nw.id,
 *     peerNetwork: network_peering_peer_nw.id,
 *     peerNetworkType: "VMWARE_ENGINE_NETWORK",
 *     exportCustomRoutes: false,
 *     importCustomRoutes: false,
 *     exportCustomRoutesWithPublicIp: false,
 *     importCustomRoutesWithPublicIp: false,
 * });
 * ```
 * ### Vmware Engine Network Peering Standard
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network_peering_vpc = new gcp.compute.Network("network-peering-vpc", {name: "default-vpc"});
 * const network_peering_standard_nw = new gcp.vmwareengine.Network("network-peering-standard-nw", {
 *     name: "default-standard-nw-np",
 *     location: "global",
 *     type: "STANDARD",
 * });
 * const vmw_engine_network_peering = new gcp.vmwareengine.NetworkPeering("vmw-engine-network-peering", {
 *     name: "sample-network-peering",
 *     description: "Sample description",
 *     peerNetwork: network_peering_vpc.id,
 *     peerNetworkType: "STANDARD",
 *     vmwareEngineNetwork: network_peering_standard_nw.id,
 * });
 * ```
 *
 * ## Import
 *
 * NetworkPeering can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/networkPeerings/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, NetworkPeering can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default projects/{{project}}/locations/global/networkPeerings/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default {{name}}
 * ```
 */
class NetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkPeering(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPeering.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["exportCustomRoutes"] = state ? state.exportCustomRoutes : undefined;
            resourceInputs["exportCustomRoutesWithPublicIp"] = state ? state.exportCustomRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = state ? state.importCustomRoutes : undefined;
            resourceInputs["importCustomRoutesWithPublicIp"] = state ? state.importCustomRoutesWithPublicIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerNetwork"] = state ? state.peerNetwork : undefined;
            resourceInputs["peerNetworkType"] = state ? state.peerNetworkType : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vmwareEngineNetwork"] = state ? state.vmwareEngineNetwork : undefined;
            resourceInputs["vmwareEngineNetworkCanonical"] = state ? state.vmwareEngineNetworkCanonical : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.peerNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetwork'");
            }
            if ((!args || args.peerNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetworkType'");
            }
            if ((!args || args.vmwareEngineNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareEngineNetwork'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exportCustomRoutes"] = args ? args.exportCustomRoutes : undefined;
            resourceInputs["exportCustomRoutesWithPublicIp"] = args ? args.exportCustomRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = args ? args.importCustomRoutes : undefined;
            resourceInputs["importCustomRoutesWithPublicIp"] = args ? args.importCustomRoutesWithPublicIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerNetwork"] = args ? args.peerNetwork : undefined;
            resourceInputs["peerNetworkType"] = args ? args.peerNetworkType : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["vmwareEngineNetwork"] = args ? args.vmwareEngineNetwork : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vmwareEngineNetworkCanonical"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPeering.__pulumiType, name, resourceInputs, opts);
    }
}
exports.NetworkPeering = NetworkPeering;
/** @internal */
NetworkPeering.__pulumiType = 'gcp:vmwareengine/networkPeering:NetworkPeering';
//# sourceMappingURL=networkPeering.js.map