"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a network policy resource. Network policies are regional resources.
 *
 * To get more information about NetworkPolicy, see:
 *
 * * [API documentation](https://cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.networkPolicies)
 *
 * ## Example Usage
 *
 * ### Vmware Engine Network Policy Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network_policy_nw = new gcp.vmwareengine.Network("network-policy-nw", {
 *     name: "sample-network",
 *     location: "global",
 *     type: "STANDARD",
 *     description: "VMwareEngine standard network sample",
 * });
 * const vmw_engine_network_policy = new gcp.vmwareengine.NetworkPolicy("vmw-engine-network-policy", {
 *     location: "us-west1",
 *     name: "sample-network-policy",
 *     edgeServicesCidr: "192.168.30.0/26",
 *     vmwareEngineNetwork: network_policy_nw.id,
 * });
 * ```
 * ### Vmware Engine Network Policy Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network_policy_nw = new gcp.vmwareengine.Network("network-policy-nw", {
 *     name: "sample-network",
 *     location: "global",
 *     type: "STANDARD",
 *     description: "VMwareEngine standard network sample",
 * });
 * const vmw_engine_network_policy = new gcp.vmwareengine.NetworkPolicy("vmw-engine-network-policy", {
 *     location: "us-west1",
 *     name: "sample-network-policy",
 *     edgeServicesCidr: "192.168.30.0/26",
 *     vmwareEngineNetwork: network_policy_nw.id,
 *     description: "Sample Network Policy",
 *     internetAccess: {
 *         enabled: true,
 *     },
 *     externalIp: {
 *         enabled: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * NetworkPolicy can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/networkPolicies/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, NetworkPolicy can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:vmwareengine/networkPolicy:NetworkPolicy default projects/{{project}}/locations/{{location}}/networkPolicies/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vmwareengine/networkPolicy:NetworkPolicy default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vmwareengine/networkPolicy:NetworkPolicy default {{location}}/{{name}}
 * ```
 */
class NetworkPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeServicesCidr"] = state ? state.edgeServicesCidr : undefined;
            resourceInputs["externalIp"] = state ? state.externalIp : undefined;
            resourceInputs["internetAccess"] = state ? state.internetAccess : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vmwareEngineNetwork"] = state ? state.vmwareEngineNetwork : undefined;
            resourceInputs["vmwareEngineNetworkCanonical"] = state ? state.vmwareEngineNetworkCanonical : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.edgeServicesCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeServicesCidr'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.vmwareEngineNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareEngineNetwork'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeServicesCidr"] = args ? args.edgeServicesCidr : undefined;
            resourceInputs["externalIp"] = args ? args.externalIp : undefined;
            resourceInputs["internetAccess"] = args ? args.internetAccess : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["vmwareEngineNetwork"] = args ? args.vmwareEngineNetwork : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vmwareEngineNetworkCanonical"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.NetworkPolicy = NetworkPolicy;
/** @internal */
NetworkPolicy.__pulumiType = 'gcp:vmwareengine/networkPolicy:NetworkPolicy';
//# sourceMappingURL=networkPolicy.js.map