"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * This resource allows you to create and manage settings for a GitHub Organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const test = new github.OrganizationSettings("test", {
 *     billingEmail: "test@example.com",
 *     company: "Test Company",
 *     blog: "https://example.com",
 *     email: "test@example.com",
 *     twitterUsername: "Test",
 *     location: "Test Location",
 *     name: "Test Name",
 *     description: "Test Description",
 *     hasOrganizationProjects: true,
 *     hasRepositoryProjects: true,
 *     defaultRepositoryPermission: "read",
 *     membersCanCreateRepositories: true,
 *     membersCanCreatePublicRepositories: true,
 *     membersCanCreatePrivateRepositories: true,
 *     membersCanCreateInternalRepositories: true,
 *     membersCanCreatePages: true,
 *     membersCanCreatePublicPages: true,
 *     membersCanCreatePrivatePages: true,
 *     membersCanForkPrivateRepositories: true,
 *     webCommitSignoffRequired: true,
 *     advancedSecurityEnabledForNewRepositories: false,
 *     dependabotAlertsEnabledForNewRepositories: false,
 *     dependabotSecurityUpdatesEnabledForNewRepositories: false,
 *     dependencyGraphEnabledForNewRepositories: false,
 *     secretScanningEnabledForNewRepositories: false,
 *     secretScanningPushProtectionEnabledForNewRepositories: false,
 * });
 * ```
 *
 * ## Import
 *
 * Organization settings can be imported using the `id` of the organization.
 * The `id` of the organization can be found using the [get an organization](https://docs.github.com/en/rest/orgs/orgs#get-an-organization) API.
 *
 * ```sh
 * $ pulumi import github:index/organizationSettings:OrganizationSettings test 123456789
 * ```
 */
class OrganizationSettings extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OrganizationSettings(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of OrganizationSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationSettings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["advancedSecurityEnabledForNewRepositories"] = state?.advancedSecurityEnabledForNewRepositories;
            resourceInputs["billingEmail"] = state?.billingEmail;
            resourceInputs["blog"] = state?.blog;
            resourceInputs["company"] = state?.company;
            resourceInputs["defaultRepositoryPermission"] = state?.defaultRepositoryPermission;
            resourceInputs["dependabotAlertsEnabledForNewRepositories"] = state?.dependabotAlertsEnabledForNewRepositories;
            resourceInputs["dependabotSecurityUpdatesEnabledForNewRepositories"] = state?.dependabotSecurityUpdatesEnabledForNewRepositories;
            resourceInputs["dependencyGraphEnabledForNewRepositories"] = state?.dependencyGraphEnabledForNewRepositories;
            resourceInputs["description"] = state?.description;
            resourceInputs["email"] = state?.email;
            resourceInputs["hasOrganizationProjects"] = state?.hasOrganizationProjects;
            resourceInputs["hasRepositoryProjects"] = state?.hasRepositoryProjects;
            resourceInputs["location"] = state?.location;
            resourceInputs["membersCanCreateInternalRepositories"] = state?.membersCanCreateInternalRepositories;
            resourceInputs["membersCanCreatePages"] = state?.membersCanCreatePages;
            resourceInputs["membersCanCreatePrivatePages"] = state?.membersCanCreatePrivatePages;
            resourceInputs["membersCanCreatePrivateRepositories"] = state?.membersCanCreatePrivateRepositories;
            resourceInputs["membersCanCreatePublicPages"] = state?.membersCanCreatePublicPages;
            resourceInputs["membersCanCreatePublicRepositories"] = state?.membersCanCreatePublicRepositories;
            resourceInputs["membersCanCreateRepositories"] = state?.membersCanCreateRepositories;
            resourceInputs["membersCanForkPrivateRepositories"] = state?.membersCanForkPrivateRepositories;
            resourceInputs["name"] = state?.name;
            resourceInputs["secretScanningEnabledForNewRepositories"] = state?.secretScanningEnabledForNewRepositories;
            resourceInputs["secretScanningPushProtectionEnabledForNewRepositories"] = state?.secretScanningPushProtectionEnabledForNewRepositories;
            resourceInputs["twitterUsername"] = state?.twitterUsername;
            resourceInputs["webCommitSignoffRequired"] = state?.webCommitSignoffRequired;
        }
        else {
            const args = argsOrState;
            if (args?.billingEmail === undefined && !opts.urn) {
                throw new Error("Missing required property 'billingEmail'");
            }
            resourceInputs["advancedSecurityEnabledForNewRepositories"] = args?.advancedSecurityEnabledForNewRepositories;
            resourceInputs["billingEmail"] = args?.billingEmail;
            resourceInputs["blog"] = args?.blog;
            resourceInputs["company"] = args?.company;
            resourceInputs["defaultRepositoryPermission"] = args?.defaultRepositoryPermission;
            resourceInputs["dependabotAlertsEnabledForNewRepositories"] = args?.dependabotAlertsEnabledForNewRepositories;
            resourceInputs["dependabotSecurityUpdatesEnabledForNewRepositories"] = args?.dependabotSecurityUpdatesEnabledForNewRepositories;
            resourceInputs["dependencyGraphEnabledForNewRepositories"] = args?.dependencyGraphEnabledForNewRepositories;
            resourceInputs["description"] = args?.description;
            resourceInputs["email"] = args?.email;
            resourceInputs["hasOrganizationProjects"] = args?.hasOrganizationProjects;
            resourceInputs["hasRepositoryProjects"] = args?.hasRepositoryProjects;
            resourceInputs["location"] = args?.location;
            resourceInputs["membersCanCreateInternalRepositories"] = args?.membersCanCreateInternalRepositories;
            resourceInputs["membersCanCreatePages"] = args?.membersCanCreatePages;
            resourceInputs["membersCanCreatePrivatePages"] = args?.membersCanCreatePrivatePages;
            resourceInputs["membersCanCreatePrivateRepositories"] = args?.membersCanCreatePrivateRepositories;
            resourceInputs["membersCanCreatePublicPages"] = args?.membersCanCreatePublicPages;
            resourceInputs["membersCanCreatePublicRepositories"] = args?.membersCanCreatePublicRepositories;
            resourceInputs["membersCanCreateRepositories"] = args?.membersCanCreateRepositories;
            resourceInputs["membersCanForkPrivateRepositories"] = args?.membersCanForkPrivateRepositories;
            resourceInputs["name"] = args?.name;
            resourceInputs["secretScanningEnabledForNewRepositories"] = args?.secretScanningEnabledForNewRepositories;
            resourceInputs["secretScanningPushProtectionEnabledForNewRepositories"] = args?.secretScanningPushProtectionEnabledForNewRepositories;
            resourceInputs["twitterUsername"] = args?.twitterUsername;
            resourceInputs["webCommitSignoffRequired"] = args?.webCommitSignoffRequired;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationSettings.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OrganizationSettings = OrganizationSettings;
/** @internal */
OrganizationSettings.__pulumiType = 'github:index/organizationSettings:OrganizationSettings';
//# sourceMappingURL=organizationSettings.js.map