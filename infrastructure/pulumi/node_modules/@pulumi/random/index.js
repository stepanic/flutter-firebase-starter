"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandomUuid = exports.RandomString = exports.RandomShuffle = exports.RandomPet = exports.RandomPassword = exports.RandomInteger = exports.RandomId = exports.RandomBytes = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
exports.RandomBytes = null;
utilities.lazyLoad(exports, ["RandomBytes"], () => require("./randomBytes"));
exports.RandomId = null;
utilities.lazyLoad(exports, ["RandomId"], () => require("./randomId"));
exports.RandomInteger = null;
utilities.lazyLoad(exports, ["RandomInteger"], () => require("./randomInteger"));
exports.RandomPassword = null;
utilities.lazyLoad(exports, ["RandomPassword"], () => require("./randomPassword"));
exports.RandomPet = null;
utilities.lazyLoad(exports, ["RandomPet"], () => require("./randomPet"));
exports.RandomShuffle = null;
utilities.lazyLoad(exports, ["RandomShuffle"], () => require("./randomShuffle"));
exports.RandomString = null;
utilities.lazyLoad(exports, ["RandomString"], () => require("./randomString"));
exports.RandomUuid = null;
utilities.lazyLoad(exports, ["RandomUuid"], () => require("./randomUuid"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "random:index/randomBytes:RandomBytes":
                return new exports.RandomBytes(name, undefined, { urn });
            case "random:index/randomId:RandomId":
                return new exports.RandomId(name, undefined, { urn });
            case "random:index/randomInteger:RandomInteger":
                return new exports.RandomInteger(name, undefined, { urn });
            case "random:index/randomPassword:RandomPassword":
                return new exports.RandomPassword(name, undefined, { urn });
            case "random:index/randomPet:RandomPet":
                return new exports.RandomPet(name, undefined, { urn });
            case "random:index/randomShuffle:RandomShuffle":
                return new exports.RandomShuffle(name, undefined, { urn });
            case "random:index/randomString:RandomString":
                return new exports.RandomString(name, undefined, { urn });
            case "random:index/randomUuid:RandomUuid":
                return new exports.RandomUuid(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("random", "index/randomBytes", _module);
pulumi.runtime.registerResourceModule("random", "index/randomId", _module);
pulumi.runtime.registerResourceModule("random", "index/randomInteger", _module);
pulumi.runtime.registerResourceModule("random", "index/randomPassword", _module);
pulumi.runtime.registerResourceModule("random", "index/randomPet", _module);
pulumi.runtime.registerResourceModule("random", "index/randomShuffle", _module);
pulumi.runtime.registerResourceModule("random", "index/randomString", _module);
pulumi.runtime.registerResourceModule("random", "index/randomUuid", _module);
pulumi.runtime.registerResourcePackage("random", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:random") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map